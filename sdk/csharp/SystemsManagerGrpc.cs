// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SystemsManager.proto
// </auto-generated>
// Original file comments:
// ------------------------------------------------------------------------------
// | SAIC PROPRIETARY INFORMATION
// |-------------------------------------------------------------------------------
// | The information in this document is proprietary to SAIC. It may not be used,
// | reproduced, disclosed, or exported without the written approval of SAIC.
// ------------------------------------------------------------------------------
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace SAIC.Valkyrie.Api.V1 {
  /// <summary>
  ///
  /// The systems manager service provides public calls into the Valkyrie system for available system services.
  /// This includes receiving service status, client services status, and heartbeats.
  /// </summary>
  public static partial class SystemsManager
  {
    static readonly string __ServiceName = "saic.valkyrie.sdk.generated.SystemsManager";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.VersionInfo> __Marshaller_saic_valkyrie_sdk_generated_VersionInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.VersionInfo.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.ServiceSubscriptionResponse> __Marshaller_saic_valkyrie_sdk_generated_ServiceSubscriptionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.ServiceSubscriptionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.ServiceStatusInfo> __Marshaller_saic_valkyrie_sdk_generated_ServiceStatusInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.ServiceStatusInfo.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.ResponseInfo> __Marshaller_saic_valkyrie_sdk_generated_ResponseInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.ResponseInfo.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.ClientSystemsSubscription> __Marshaller_saic_valkyrie_sdk_generated_ClientSystemsSubscription = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.ClientSystemsSubscription.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.VersionInfo> __Method_getVersion = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.VersionInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getVersion",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_saic_valkyrie_sdk_generated_VersionInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.ServiceSubscriptionResponse> __Method_getStatuses = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.ServiceSubscriptionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getStatuses",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_saic_valkyrie_sdk_generated_ServiceSubscriptionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::SAIC.Valkyrie.Api.V1.ServiceStatusInfo, global::SAIC.Valkyrie.Api.V1.ResponseInfo> __Method_publish = new grpc::Method<global::SAIC.Valkyrie.Api.V1.ServiceStatusInfo, global::SAIC.Valkyrie.Api.V1.ResponseInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "publish",
        __Marshaller_saic_valkyrie_sdk_generated_ServiceStatusInfo,
        __Marshaller_saic_valkyrie_sdk_generated_ResponseInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::SAIC.Valkyrie.Api.V1.ClientSystemsSubscription, global::SAIC.Valkyrie.Api.V1.ServiceSubscriptionResponse> __Method_subscribe = new grpc::Method<global::SAIC.Valkyrie.Api.V1.ClientSystemsSubscription, global::SAIC.Valkyrie.Api.V1.ServiceSubscriptionResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "subscribe",
        __Marshaller_saic_valkyrie_sdk_generated_ClientSystemsSubscription,
        __Marshaller_saic_valkyrie_sdk_generated_ServiceSubscriptionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SAIC.Valkyrie.Api.V1.SystemsManagerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SystemsManager</summary>
    [grpc::BindServiceMethod(typeof(SystemsManager), "BindService")]
    public abstract partial class SystemsManagerBase
    {
      /// <summary>
      ///
      /// Retrieves version information for the SystemsManager service.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::SAIC.Valkyrie.Api.V1.VersionInfo> getVersion(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// Get the most recent set of system statuses maintained within the systems manager.
      /// Returns the set of statuses as a single message.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::SAIC.Valkyrie.Api.V1.ServiceSubscriptionResponse> getStatuses(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// A publish call from a Valkyrie service. Pushes status from one Valkyrie service to the
      /// SystemsManager, which maintains golden status for a service and publishes periodically
      /// to subscribed clients.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::SAIC.Valkyrie.Api.V1.ResponseInfo> publish(global::SAIC.Valkyrie.Api.V1.ServiceStatusInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// Ability for a client to receive status for services within the system on a periodic basis.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task subscribe(global::SAIC.Valkyrie.Api.V1.ClientSystemsSubscription request, grpc::IServerStreamWriter<global::SAIC.Valkyrie.Api.V1.ServiceSubscriptionResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SystemsManager</summary>
    public partial class SystemsManagerClient : grpc::ClientBase<SystemsManagerClient>
    {
      /// <summary>Creates a new client for SystemsManager</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SystemsManagerClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SystemsManager that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SystemsManagerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SystemsManagerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SystemsManagerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///
      /// Retrieves version information for the SystemsManager service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.VersionInfo getVersion(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Retrieves version information for the SystemsManager service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.VersionInfo getVersion(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getVersion, null, options, request);
      }
      /// <summary>
      ///
      /// Retrieves version information for the SystemsManager service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.VersionInfo> getVersionAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Retrieves version information for the SystemsManager service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.VersionInfo> getVersionAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getVersion, null, options, request);
      }
      /// <summary>
      ///
      /// Get the most recent set of system statuses maintained within the systems manager.
      /// Returns the set of statuses as a single message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.ServiceSubscriptionResponse getStatuses(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getStatuses(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Get the most recent set of system statuses maintained within the systems manager.
      /// Returns the set of statuses as a single message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.ServiceSubscriptionResponse getStatuses(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getStatuses, null, options, request);
      }
      /// <summary>
      ///
      /// Get the most recent set of system statuses maintained within the systems manager.
      /// Returns the set of statuses as a single message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.ServiceSubscriptionResponse> getStatusesAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getStatusesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Get the most recent set of system statuses maintained within the systems manager.
      /// Returns the set of statuses as a single message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.ServiceSubscriptionResponse> getStatusesAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getStatuses, null, options, request);
      }
      /// <summary>
      ///
      /// A publish call from a Valkyrie service. Pushes status from one Valkyrie service to the
      /// SystemsManager, which maintains golden status for a service and publishes periodically
      /// to subscribed clients.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.ResponseInfo publish(global::SAIC.Valkyrie.Api.V1.ServiceStatusInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return publish(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// A publish call from a Valkyrie service. Pushes status from one Valkyrie service to the
      /// SystemsManager, which maintains golden status for a service and publishes periodically
      /// to subscribed clients.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.ResponseInfo publish(global::SAIC.Valkyrie.Api.V1.ServiceStatusInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_publish, null, options, request);
      }
      /// <summary>
      ///
      /// A publish call from a Valkyrie service. Pushes status from one Valkyrie service to the
      /// SystemsManager, which maintains golden status for a service and publishes periodically
      /// to subscribed clients.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.ResponseInfo> publishAsync(global::SAIC.Valkyrie.Api.V1.ServiceStatusInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return publishAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// A publish call from a Valkyrie service. Pushes status from one Valkyrie service to the
      /// SystemsManager, which maintains golden status for a service and publishes periodically
      /// to subscribed clients.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.ResponseInfo> publishAsync(global::SAIC.Valkyrie.Api.V1.ServiceStatusInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_publish, null, options, request);
      }
      /// <summary>
      ///
      /// Ability for a client to receive status for services within the system on a periodic basis.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::SAIC.Valkyrie.Api.V1.ServiceSubscriptionResponse> subscribe(global::SAIC.Valkyrie.Api.V1.ClientSystemsSubscription request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return subscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Ability for a client to receive status for services within the system on a periodic basis.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::SAIC.Valkyrie.Api.V1.ServiceSubscriptionResponse> subscribe(global::SAIC.Valkyrie.Api.V1.ClientSystemsSubscription request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_subscribe, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override SystemsManagerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SystemsManagerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(SystemsManagerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_getVersion, serviceImpl.getVersion)
          .AddMethod(__Method_getStatuses, serviceImpl.getStatuses)
          .AddMethod(__Method_publish, serviceImpl.publish)
          .AddMethod(__Method_subscribe, serviceImpl.subscribe).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SystemsManagerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_getVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.VersionInfo>(serviceImpl.getVersion));
      serviceBinder.AddMethod(__Method_getStatuses, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.ServiceSubscriptionResponse>(serviceImpl.getStatuses));
      serviceBinder.AddMethod(__Method_publish, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SAIC.Valkyrie.Api.V1.ServiceStatusInfo, global::SAIC.Valkyrie.Api.V1.ResponseInfo>(serviceImpl.publish));
      serviceBinder.AddMethod(__Method_subscribe, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::SAIC.Valkyrie.Api.V1.ClientSystemsSubscription, global::SAIC.Valkyrie.Api.V1.ServiceSubscriptionResponse>(serviceImpl.subscribe));
    }

  }
}
#endregion
