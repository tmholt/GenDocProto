// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ThreatsManager.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace SAIC.Valkyrie.Api.V1 {
  /// <summary>
  ///
  /// The threats manager service provides public calls into the Valkyrie system for
  /// threat-related actions. The client can subscribe to threats as
  /// they occur. This interface also supports addition of threats into the system.
  /// </summary>
  public static partial class ThreatsManager
  {
    static readonly string __ServiceName = "saic.valkyrie.sdk.generated.ThreatsManager";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.VersionInfo> __Marshaller_saic_valkyrie_sdk_generated_VersionInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.VersionInfo.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.ThreatsManagerSubscription> __Marshaller_saic_valkyrie_sdk_generated_ThreatsManagerSubscription = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.ThreatsManagerSubscription.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.ThreatsManagerSubscriptionResponse> __Marshaller_saic_valkyrie_sdk_generated_ThreatsManagerSubscriptionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.ThreatsManagerSubscriptionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.ThreatAdditionDetails> __Marshaller_saic_valkyrie_sdk_generated_ThreatAdditionDetails = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.ThreatAdditionDetails.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.ResponseInfo> __Marshaller_saic_valkyrie_sdk_generated_ResponseInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.ResponseInfo.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.TargetAffiliationInfo> __Marshaller_saic_valkyrie_sdk_generated_TargetAffiliationInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.TargetAffiliationInfo.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.TargetClassificationInfo> __Marshaller_saic_valkyrie_sdk_generated_TargetClassificationInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.TargetClassificationInfo.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.ThreatInfo> __Marshaller_saic_valkyrie_sdk_generated_ThreatInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.ThreatInfo.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.ThreatDetailsRequest> __Marshaller_saic_valkyrie_sdk_generated_ThreatDetailsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.ThreatDetailsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.HeatmapRequest> __Marshaller_saic_valkyrie_sdk_generated_HeatmapRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.HeatmapRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.HeatmapResponse> __Marshaller_saic_valkyrie_sdk_generated_HeatmapResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.HeatmapResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.VersionInfo> __Method_getVersion = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.VersionInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getVersion",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_saic_valkyrie_sdk_generated_VersionInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::SAIC.Valkyrie.Api.V1.ThreatsManagerSubscription, global::SAIC.Valkyrie.Api.V1.ThreatsManagerSubscriptionResponse> __Method_subscribe = new grpc::Method<global::SAIC.Valkyrie.Api.V1.ThreatsManagerSubscription, global::SAIC.Valkyrie.Api.V1.ThreatsManagerSubscriptionResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "subscribe",
        __Marshaller_saic_valkyrie_sdk_generated_ThreatsManagerSubscription,
        __Marshaller_saic_valkyrie_sdk_generated_ThreatsManagerSubscriptionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::SAIC.Valkyrie.Api.V1.ThreatAdditionDetails, global::SAIC.Valkyrie.Api.V1.ResponseInfo> __Method_addThreat = new grpc::Method<global::SAIC.Valkyrie.Api.V1.ThreatAdditionDetails, global::SAIC.Valkyrie.Api.V1.ResponseInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "addThreat",
        __Marshaller_saic_valkyrie_sdk_generated_ThreatAdditionDetails,
        __Marshaller_saic_valkyrie_sdk_generated_ResponseInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::SAIC.Valkyrie.Api.V1.TargetAffiliationInfo, global::SAIC.Valkyrie.Api.V1.ResponseInfo> __Method_setAffiliation = new grpc::Method<global::SAIC.Valkyrie.Api.V1.TargetAffiliationInfo, global::SAIC.Valkyrie.Api.V1.ResponseInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "setAffiliation",
        __Marshaller_saic_valkyrie_sdk_generated_TargetAffiliationInfo,
        __Marshaller_saic_valkyrie_sdk_generated_ResponseInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.TargetAffiliationInfo> __Method_getAffiliations = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.TargetAffiliationInfo>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "getAffiliations",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_saic_valkyrie_sdk_generated_TargetAffiliationInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::SAIC.Valkyrie.Api.V1.TargetClassificationInfo, global::SAIC.Valkyrie.Api.V1.ResponseInfo> __Method_setClassification = new grpc::Method<global::SAIC.Valkyrie.Api.V1.TargetClassificationInfo, global::SAIC.Valkyrie.Api.V1.ResponseInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "setClassification",
        __Marshaller_saic_valkyrie_sdk_generated_TargetClassificationInfo,
        __Marshaller_saic_valkyrie_sdk_generated_ResponseInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.TargetClassificationInfo> __Method_getClassifications = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.TargetClassificationInfo>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "getClassifications",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_saic_valkyrie_sdk_generated_TargetClassificationInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.ThreatInfo> __Method_getThreats = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.ThreatInfo>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "getThreats",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_saic_valkyrie_sdk_generated_ThreatInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::SAIC.Valkyrie.Api.V1.ThreatDetailsRequest, global::SAIC.Valkyrie.Api.V1.ThreatInfo> __Method_getThreat = new grpc::Method<global::SAIC.Valkyrie.Api.V1.ThreatDetailsRequest, global::SAIC.Valkyrie.Api.V1.ThreatInfo>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "getThreat",
        __Marshaller_saic_valkyrie_sdk_generated_ThreatDetailsRequest,
        __Marshaller_saic_valkyrie_sdk_generated_ThreatInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::SAIC.Valkyrie.Api.V1.HeatmapRequest, global::SAIC.Valkyrie.Api.V1.HeatmapResponse> __Method_subscribeToHeatmap = new grpc::Method<global::SAIC.Valkyrie.Api.V1.HeatmapRequest, global::SAIC.Valkyrie.Api.V1.HeatmapResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "subscribeToHeatmap",
        __Marshaller_saic_valkyrie_sdk_generated_HeatmapRequest,
        __Marshaller_saic_valkyrie_sdk_generated_HeatmapResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SAIC.Valkyrie.Api.V1.ThreatsManagerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ThreatsManager</summary>
    [grpc::BindServiceMethod(typeof(ThreatsManager), "BindService")]
    public abstract partial class ThreatsManagerBase
    {
      /// <summary>
      ///
      /// Retrieves version information for the SystemsManager service.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::SAIC.Valkyrie.Api.V1.VersionInfo> getVersion(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// Subscribe to the threats manager for threats, user affiliation, and user classification changes.
      /// The client will receive ThreatsManagerSubscriptionResponse objects until the subscription is cancelled. &lt;br/>
      /// Input: Details about the subscription for this client &lt;br/>
      /// Output: The output stream of threats manager events to the subscribed client
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task subscribe(global::SAIC.Valkyrie.Api.V1.ThreatsManagerSubscription request, grpc::IServerStreamWriter<global::SAIC.Valkyrie.Api.V1.ThreatsManagerSubscriptionResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// Ability to add a complete threat into the Valkyrie system. This will bypass the
      /// Valkyrie correlator, and will instead feed it into the threats pipeline, which includes
      /// going through the threat prioritization process and sending it to subscribed clients. &lt;br/>
      /// Input: The threat details to include into the VALKYRIE system &lt;br/>
      /// Output: A standard response class with success/failure information
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::SAIC.Valkyrie.Api.V1.ResponseInfo> addThreat(global::SAIC.Valkyrie.Api.V1.ThreatAdditionDetails request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// Ability to override the affiliation of an existing threat in the system.  &lt;br/>
      /// Input: The client threat affiliation definition &lt;br/>
      /// Output: A standard response class with success/failure information
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::SAIC.Valkyrie.Api.V1.ResponseInfo> setAffiliation(global::SAIC.Valkyrie.Api.V1.TargetAffiliationInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// Ability to request all user-defined threat affiliations. Returns a stream of
      /// {@link TargetAffiliationInfo} objects containing the threat IDs and defined
      /// affiliations.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task getAffiliations(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::IServerStreamWriter<global::SAIC.Valkyrie.Api.V1.TargetAffiliationInfo> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// Ability to override the classification of an existing threat in the system. &lt;br/>
      /// Input: The client threat classification definition &lt;br/>
      /// Output: A standard response class with success/failure information
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::SAIC.Valkyrie.Api.V1.ResponseInfo> setClassification(global::SAIC.Valkyrie.Api.V1.TargetClassificationInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// Ability to request all user-defined threat classifications. Returns a stream of
      /// {@link TargetClassificationInfo} objects containing the threat IDs and defined
      /// classifications.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task getClassifications(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::IServerStreamWriter<global::SAIC.Valkyrie.Api.V1.TargetClassificationInfo> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// Ability to request all threats currently in the system. Returns a stream
      /// of ThreatInfo objects.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task getThreats(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::IServerStreamWriter<global::SAIC.Valkyrie.Api.V1.ThreatInfo> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// Ability to request one or more specific threats currently in the system
      /// based on a set of known threat ids.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task getThreat(global::SAIC.Valkyrie.Api.V1.ThreatDetailsRequest request, grpc::IServerStreamWriter<global::SAIC.Valkyrie.Api.V1.ThreatInfo> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// subscribeToHeatmap
      /// Ability to request heatmap data for threats in the system.
      ///
      /// Input: Definition of the heatmap data to receive
      /// Output: A stream of matching HeatmapResult values. Note that the
      /// server will only call onComplete on the return stream if the data requested
      /// is purely historical. Otherwise data will continue to be streamed until cancel
      /// is called by the receiver.
      /// https://stackoverflow.com/questions/63250570/how-to-cancel-a-grpc-streaming-call
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task subscribeToHeatmap(global::SAIC.Valkyrie.Api.V1.HeatmapRequest request, grpc::IServerStreamWriter<global::SAIC.Valkyrie.Api.V1.HeatmapResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ThreatsManager</summary>
    public partial class ThreatsManagerClient : grpc::ClientBase<ThreatsManagerClient>
    {
      /// <summary>Creates a new client for ThreatsManager</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ThreatsManagerClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ThreatsManager that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ThreatsManagerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ThreatsManagerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ThreatsManagerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///
      /// Retrieves version information for the SystemsManager service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.VersionInfo getVersion(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Retrieves version information for the SystemsManager service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.VersionInfo getVersion(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getVersion, null, options, request);
      }
      /// <summary>
      ///
      /// Retrieves version information for the SystemsManager service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.VersionInfo> getVersionAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Retrieves version information for the SystemsManager service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.VersionInfo> getVersionAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getVersion, null, options, request);
      }
      /// <summary>
      ///
      /// Subscribe to the threats manager for threats, user affiliation, and user classification changes.
      /// The client will receive ThreatsManagerSubscriptionResponse objects until the subscription is cancelled. &lt;br/>
      /// Input: Details about the subscription for this client &lt;br/>
      /// Output: The output stream of threats manager events to the subscribed client
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::SAIC.Valkyrie.Api.V1.ThreatsManagerSubscriptionResponse> subscribe(global::SAIC.Valkyrie.Api.V1.ThreatsManagerSubscription request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return subscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Subscribe to the threats manager for threats, user affiliation, and user classification changes.
      /// The client will receive ThreatsManagerSubscriptionResponse objects until the subscription is cancelled. &lt;br/>
      /// Input: Details about the subscription for this client &lt;br/>
      /// Output: The output stream of threats manager events to the subscribed client
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::SAIC.Valkyrie.Api.V1.ThreatsManagerSubscriptionResponse> subscribe(global::SAIC.Valkyrie.Api.V1.ThreatsManagerSubscription request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_subscribe, null, options, request);
      }
      /// <summary>
      ///
      /// Ability to add a complete threat into the Valkyrie system. This will bypass the
      /// Valkyrie correlator, and will instead feed it into the threats pipeline, which includes
      /// going through the threat prioritization process and sending it to subscribed clients. &lt;br/>
      /// Input: The threat details to include into the VALKYRIE system &lt;br/>
      /// Output: A standard response class with success/failure information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.ResponseInfo addThreat(global::SAIC.Valkyrie.Api.V1.ThreatAdditionDetails request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return addThreat(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Ability to add a complete threat into the Valkyrie system. This will bypass the
      /// Valkyrie correlator, and will instead feed it into the threats pipeline, which includes
      /// going through the threat prioritization process and sending it to subscribed clients. &lt;br/>
      /// Input: The threat details to include into the VALKYRIE system &lt;br/>
      /// Output: A standard response class with success/failure information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.ResponseInfo addThreat(global::SAIC.Valkyrie.Api.V1.ThreatAdditionDetails request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_addThreat, null, options, request);
      }
      /// <summary>
      ///
      /// Ability to add a complete threat into the Valkyrie system. This will bypass the
      /// Valkyrie correlator, and will instead feed it into the threats pipeline, which includes
      /// going through the threat prioritization process and sending it to subscribed clients. &lt;br/>
      /// Input: The threat details to include into the VALKYRIE system &lt;br/>
      /// Output: A standard response class with success/failure information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.ResponseInfo> addThreatAsync(global::SAIC.Valkyrie.Api.V1.ThreatAdditionDetails request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return addThreatAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Ability to add a complete threat into the Valkyrie system. This will bypass the
      /// Valkyrie correlator, and will instead feed it into the threats pipeline, which includes
      /// going through the threat prioritization process and sending it to subscribed clients. &lt;br/>
      /// Input: The threat details to include into the VALKYRIE system &lt;br/>
      /// Output: A standard response class with success/failure information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.ResponseInfo> addThreatAsync(global::SAIC.Valkyrie.Api.V1.ThreatAdditionDetails request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_addThreat, null, options, request);
      }
      /// <summary>
      ///
      /// Ability to override the affiliation of an existing threat in the system.  &lt;br/>
      /// Input: The client threat affiliation definition &lt;br/>
      /// Output: A standard response class with success/failure information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.ResponseInfo setAffiliation(global::SAIC.Valkyrie.Api.V1.TargetAffiliationInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return setAffiliation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Ability to override the affiliation of an existing threat in the system.  &lt;br/>
      /// Input: The client threat affiliation definition &lt;br/>
      /// Output: A standard response class with success/failure information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.ResponseInfo setAffiliation(global::SAIC.Valkyrie.Api.V1.TargetAffiliationInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_setAffiliation, null, options, request);
      }
      /// <summary>
      ///
      /// Ability to override the affiliation of an existing threat in the system.  &lt;br/>
      /// Input: The client threat affiliation definition &lt;br/>
      /// Output: A standard response class with success/failure information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.ResponseInfo> setAffiliationAsync(global::SAIC.Valkyrie.Api.V1.TargetAffiliationInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return setAffiliationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Ability to override the affiliation of an existing threat in the system.  &lt;br/>
      /// Input: The client threat affiliation definition &lt;br/>
      /// Output: A standard response class with success/failure information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.ResponseInfo> setAffiliationAsync(global::SAIC.Valkyrie.Api.V1.TargetAffiliationInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_setAffiliation, null, options, request);
      }
      /// <summary>
      ///
      /// Ability to request all user-defined threat affiliations. Returns a stream of
      /// {@link TargetAffiliationInfo} objects containing the threat IDs and defined
      /// affiliations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::SAIC.Valkyrie.Api.V1.TargetAffiliationInfo> getAffiliations(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getAffiliations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Ability to request all user-defined threat affiliations. Returns a stream of
      /// {@link TargetAffiliationInfo} objects containing the threat IDs and defined
      /// affiliations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::SAIC.Valkyrie.Api.V1.TargetAffiliationInfo> getAffiliations(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_getAffiliations, null, options, request);
      }
      /// <summary>
      ///
      /// Ability to override the classification of an existing threat in the system. &lt;br/>
      /// Input: The client threat classification definition &lt;br/>
      /// Output: A standard response class with success/failure information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.ResponseInfo setClassification(global::SAIC.Valkyrie.Api.V1.TargetClassificationInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return setClassification(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Ability to override the classification of an existing threat in the system. &lt;br/>
      /// Input: The client threat classification definition &lt;br/>
      /// Output: A standard response class with success/failure information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.ResponseInfo setClassification(global::SAIC.Valkyrie.Api.V1.TargetClassificationInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_setClassification, null, options, request);
      }
      /// <summary>
      ///
      /// Ability to override the classification of an existing threat in the system. &lt;br/>
      /// Input: The client threat classification definition &lt;br/>
      /// Output: A standard response class with success/failure information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.ResponseInfo> setClassificationAsync(global::SAIC.Valkyrie.Api.V1.TargetClassificationInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return setClassificationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Ability to override the classification of an existing threat in the system. &lt;br/>
      /// Input: The client threat classification definition &lt;br/>
      /// Output: A standard response class with success/failure information
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.ResponseInfo> setClassificationAsync(global::SAIC.Valkyrie.Api.V1.TargetClassificationInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_setClassification, null, options, request);
      }
      /// <summary>
      ///
      /// Ability to request all user-defined threat classifications. Returns a stream of
      /// {@link TargetClassificationInfo} objects containing the threat IDs and defined
      /// classifications.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::SAIC.Valkyrie.Api.V1.TargetClassificationInfo> getClassifications(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getClassifications(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Ability to request all user-defined threat classifications. Returns a stream of
      /// {@link TargetClassificationInfo} objects containing the threat IDs and defined
      /// classifications.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::SAIC.Valkyrie.Api.V1.TargetClassificationInfo> getClassifications(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_getClassifications, null, options, request);
      }
      /// <summary>
      ///
      /// Ability to request all threats currently in the system. Returns a stream
      /// of ThreatInfo objects.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::SAIC.Valkyrie.Api.V1.ThreatInfo> getThreats(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getThreats(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Ability to request all threats currently in the system. Returns a stream
      /// of ThreatInfo objects.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::SAIC.Valkyrie.Api.V1.ThreatInfo> getThreats(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_getThreats, null, options, request);
      }
      /// <summary>
      ///
      /// Ability to request one or more specific threats currently in the system
      /// based on a set of known threat ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::SAIC.Valkyrie.Api.V1.ThreatInfo> getThreat(global::SAIC.Valkyrie.Api.V1.ThreatDetailsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getThreat(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Ability to request one or more specific threats currently in the system
      /// based on a set of known threat ids.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::SAIC.Valkyrie.Api.V1.ThreatInfo> getThreat(global::SAIC.Valkyrie.Api.V1.ThreatDetailsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_getThreat, null, options, request);
      }
      /// <summary>
      ///
      /// subscribeToHeatmap
      /// Ability to request heatmap data for threats in the system.
      ///
      /// Input: Definition of the heatmap data to receive
      /// Output: A stream of matching HeatmapResult values. Note that the
      /// server will only call onComplete on the return stream if the data requested
      /// is purely historical. Otherwise data will continue to be streamed until cancel
      /// is called by the receiver.
      /// https://stackoverflow.com/questions/63250570/how-to-cancel-a-grpc-streaming-call
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::SAIC.Valkyrie.Api.V1.HeatmapResponse> subscribeToHeatmap(global::SAIC.Valkyrie.Api.V1.HeatmapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return subscribeToHeatmap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// subscribeToHeatmap
      /// Ability to request heatmap data for threats in the system.
      ///
      /// Input: Definition of the heatmap data to receive
      /// Output: A stream of matching HeatmapResult values. Note that the
      /// server will only call onComplete on the return stream if the data requested
      /// is purely historical. Otherwise data will continue to be streamed until cancel
      /// is called by the receiver.
      /// https://stackoverflow.com/questions/63250570/how-to-cancel-a-grpc-streaming-call
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::SAIC.Valkyrie.Api.V1.HeatmapResponse> subscribeToHeatmap(global::SAIC.Valkyrie.Api.V1.HeatmapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_subscribeToHeatmap, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ThreatsManagerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ThreatsManagerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ThreatsManagerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_getVersion, serviceImpl.getVersion)
          .AddMethod(__Method_subscribe, serviceImpl.subscribe)
          .AddMethod(__Method_addThreat, serviceImpl.addThreat)
          .AddMethod(__Method_setAffiliation, serviceImpl.setAffiliation)
          .AddMethod(__Method_getAffiliations, serviceImpl.getAffiliations)
          .AddMethod(__Method_setClassification, serviceImpl.setClassification)
          .AddMethod(__Method_getClassifications, serviceImpl.getClassifications)
          .AddMethod(__Method_getThreats, serviceImpl.getThreats)
          .AddMethod(__Method_getThreat, serviceImpl.getThreat)
          .AddMethod(__Method_subscribeToHeatmap, serviceImpl.subscribeToHeatmap).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ThreatsManagerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_getVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.VersionInfo>(serviceImpl.getVersion));
      serviceBinder.AddMethod(__Method_subscribe, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::SAIC.Valkyrie.Api.V1.ThreatsManagerSubscription, global::SAIC.Valkyrie.Api.V1.ThreatsManagerSubscriptionResponse>(serviceImpl.subscribe));
      serviceBinder.AddMethod(__Method_addThreat, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SAIC.Valkyrie.Api.V1.ThreatAdditionDetails, global::SAIC.Valkyrie.Api.V1.ResponseInfo>(serviceImpl.addThreat));
      serviceBinder.AddMethod(__Method_setAffiliation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SAIC.Valkyrie.Api.V1.TargetAffiliationInfo, global::SAIC.Valkyrie.Api.V1.ResponseInfo>(serviceImpl.setAffiliation));
      serviceBinder.AddMethod(__Method_getAffiliations, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.TargetAffiliationInfo>(serviceImpl.getAffiliations));
      serviceBinder.AddMethod(__Method_setClassification, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SAIC.Valkyrie.Api.V1.TargetClassificationInfo, global::SAIC.Valkyrie.Api.V1.ResponseInfo>(serviceImpl.setClassification));
      serviceBinder.AddMethod(__Method_getClassifications, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.TargetClassificationInfo>(serviceImpl.getClassifications));
      serviceBinder.AddMethod(__Method_getThreats, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.ThreatInfo>(serviceImpl.getThreats));
      serviceBinder.AddMethod(__Method_getThreat, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::SAIC.Valkyrie.Api.V1.ThreatDetailsRequest, global::SAIC.Valkyrie.Api.V1.ThreatInfo>(serviceImpl.getThreat));
      serviceBinder.AddMethod(__Method_subscribeToHeatmap, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::SAIC.Valkyrie.Api.V1.HeatmapRequest, global::SAIC.Valkyrie.Api.V1.HeatmapResponse>(serviceImpl.subscribeToHeatmap));
    }

  }
}
#endregion
