// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: AlertsManager.proto
// </auto-generated>
// Original file comments:
// ------------------------------------------------------------------------------
// | SAIC PROPRIETARY INFORMATION
// |-------------------------------------------------------------------------------
// | The information in this document is proprietary to SAIC. It may not be used,
// | reproduced, disclosed, or exported without the written approval of SAIC.
// ------------------------------------------------------------------------------
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace SAIC.Valkyrie.Api.V1 {
  /// <summary>
  ///
  /// The AlertsManager service is the central hub for alerts within the Valkyrie system.
  /// Alerts are published to this service, and subscribed clients will receive those alerts
  /// asynchronously as they come in. The service also maintains recent alerts, which can be
  /// queried for.
  /// </summary>
  public static partial class AlertsManager
  {
    static readonly string __ServiceName = "saic.valkyrie.sdk.generated.AlertsManager";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.VersionInfo> __Marshaller_saic_valkyrie_sdk_generated_VersionInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.VersionInfo.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.SystemAlert> __Marshaller_saic_valkyrie_sdk_generated_SystemAlert = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.SystemAlert.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.AlertDismissalRequest> __Marshaller_saic_valkyrie_sdk_generated_AlertDismissalRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.AlertDismissalRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.ResponseInfo> __Marshaller_saic_valkyrie_sdk_generated_ResponseInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.ResponseInfo.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.ClientAlertsSubscription> __Marshaller_saic_valkyrie_sdk_generated_ClientAlertsSubscription = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.ClientAlertsSubscription.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.AlertsSubscriptionResponse> __Marshaller_saic_valkyrie_sdk_generated_AlertsSubscriptionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.AlertsSubscriptionResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.VersionInfo> __Method_getVersion = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.VersionInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getVersion",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_saic_valkyrie_sdk_generated_VersionInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.SystemAlert> __Method_getRecentAlerts = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.SystemAlert>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "getRecentAlerts",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_saic_valkyrie_sdk_generated_SystemAlert);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::SAIC.Valkyrie.Api.V1.AlertDismissalRequest, global::SAIC.Valkyrie.Api.V1.ResponseInfo> __Method_dismissAlert = new grpc::Method<global::SAIC.Valkyrie.Api.V1.AlertDismissalRequest, global::SAIC.Valkyrie.Api.V1.ResponseInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "dismissAlert",
        __Marshaller_saic_valkyrie_sdk_generated_AlertDismissalRequest,
        __Marshaller_saic_valkyrie_sdk_generated_ResponseInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::SAIC.Valkyrie.Api.V1.SystemAlert, global::SAIC.Valkyrie.Api.V1.ResponseInfo> __Method_sendAlert = new grpc::Method<global::SAIC.Valkyrie.Api.V1.SystemAlert, global::SAIC.Valkyrie.Api.V1.ResponseInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "sendAlert",
        __Marshaller_saic_valkyrie_sdk_generated_SystemAlert,
        __Marshaller_saic_valkyrie_sdk_generated_ResponseInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::SAIC.Valkyrie.Api.V1.ClientAlertsSubscription, global::SAIC.Valkyrie.Api.V1.AlertsSubscriptionResponse> __Method_subscribe = new grpc::Method<global::SAIC.Valkyrie.Api.V1.ClientAlertsSubscription, global::SAIC.Valkyrie.Api.V1.AlertsSubscriptionResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "subscribe",
        __Marshaller_saic_valkyrie_sdk_generated_ClientAlertsSubscription,
        __Marshaller_saic_valkyrie_sdk_generated_AlertsSubscriptionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SAIC.Valkyrie.Api.V1.AlertsManagerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AlertsManager</summary>
    [grpc::BindServiceMethod(typeof(AlertsManager), "BindService")]
    public abstract partial class AlertsManagerBase
    {
      /// <summary>
      ///
      /// Retrieves version information for the AlertsManager service.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::SAIC.Valkyrie.Api.V1.VersionInfo> getVersion(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// Returns a stream of all recent alerts, and then completes the stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task getRecentAlerts(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::IServerStreamWriter<global::SAIC.Valkyrie.Api.V1.SystemAlert> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// The DismissAlert call removes one alert from the recent alerts list and from the
      /// critical alerts list. A critical alert never times out (like recent alerts do), and so
      /// are never removed from the list sent to clients until specifically dismissed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::SAIC.Valkyrie.Api.V1.ResponseInfo> dismissAlert(global::SAIC.Valkyrie.Api.V1.AlertDismissalRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// The SendAlert call publishes one alert to the Alerts Manager, which is then added to the recent
      /// alerts list and published out to all subscribed clients.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::SAIC.Valkyrie.Api.V1.ResponseInfo> sendAlert(global::SAIC.Valkyrie.Api.V1.SystemAlert request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// Ability for a client to subscribe to system alerts, and receive them back as they occur.
      /// The request contains specifics for what kind of alerts the client would like to receive.
      /// The client immediately receives recent alerts via the response stream, and then additional
      /// alerts as they occur.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task subscribe(global::SAIC.Valkyrie.Api.V1.ClientAlertsSubscription request, grpc::IServerStreamWriter<global::SAIC.Valkyrie.Api.V1.AlertsSubscriptionResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AlertsManager</summary>
    public partial class AlertsManagerClient : grpc::ClientBase<AlertsManagerClient>
    {
      /// <summary>Creates a new client for AlertsManager</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AlertsManagerClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AlertsManager that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AlertsManagerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AlertsManagerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AlertsManagerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///
      /// Retrieves version information for the AlertsManager service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.VersionInfo getVersion(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Retrieves version information for the AlertsManager service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.VersionInfo getVersion(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getVersion, null, options, request);
      }
      /// <summary>
      ///
      /// Retrieves version information for the AlertsManager service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.VersionInfo> getVersionAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Retrieves version information for the AlertsManager service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.VersionInfo> getVersionAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getVersion, null, options, request);
      }
      /// <summary>
      ///
      /// Returns a stream of all recent alerts, and then completes the stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::SAIC.Valkyrie.Api.V1.SystemAlert> getRecentAlerts(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getRecentAlerts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Returns a stream of all recent alerts, and then completes the stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::SAIC.Valkyrie.Api.V1.SystemAlert> getRecentAlerts(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_getRecentAlerts, null, options, request);
      }
      /// <summary>
      ///
      /// The DismissAlert call removes one alert from the recent alerts list and from the
      /// critical alerts list. A critical alert never times out (like recent alerts do), and so
      /// are never removed from the list sent to clients until specifically dismissed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.ResponseInfo dismissAlert(global::SAIC.Valkyrie.Api.V1.AlertDismissalRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return dismissAlert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// The DismissAlert call removes one alert from the recent alerts list and from the
      /// critical alerts list. A critical alert never times out (like recent alerts do), and so
      /// are never removed from the list sent to clients until specifically dismissed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.ResponseInfo dismissAlert(global::SAIC.Valkyrie.Api.V1.AlertDismissalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_dismissAlert, null, options, request);
      }
      /// <summary>
      ///
      /// The DismissAlert call removes one alert from the recent alerts list and from the
      /// critical alerts list. A critical alert never times out (like recent alerts do), and so
      /// are never removed from the list sent to clients until specifically dismissed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.ResponseInfo> dismissAlertAsync(global::SAIC.Valkyrie.Api.V1.AlertDismissalRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return dismissAlertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// The DismissAlert call removes one alert from the recent alerts list and from the
      /// critical alerts list. A critical alert never times out (like recent alerts do), and so
      /// are never removed from the list sent to clients until specifically dismissed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.ResponseInfo> dismissAlertAsync(global::SAIC.Valkyrie.Api.V1.AlertDismissalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_dismissAlert, null, options, request);
      }
      /// <summary>
      ///
      /// The SendAlert call publishes one alert to the Alerts Manager, which is then added to the recent
      /// alerts list and published out to all subscribed clients.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.ResponseInfo sendAlert(global::SAIC.Valkyrie.Api.V1.SystemAlert request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return sendAlert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// The SendAlert call publishes one alert to the Alerts Manager, which is then added to the recent
      /// alerts list and published out to all subscribed clients.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.ResponseInfo sendAlert(global::SAIC.Valkyrie.Api.V1.SystemAlert request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_sendAlert, null, options, request);
      }
      /// <summary>
      ///
      /// The SendAlert call publishes one alert to the Alerts Manager, which is then added to the recent
      /// alerts list and published out to all subscribed clients.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.ResponseInfo> sendAlertAsync(global::SAIC.Valkyrie.Api.V1.SystemAlert request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return sendAlertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// The SendAlert call publishes one alert to the Alerts Manager, which is then added to the recent
      /// alerts list and published out to all subscribed clients.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.ResponseInfo> sendAlertAsync(global::SAIC.Valkyrie.Api.V1.SystemAlert request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_sendAlert, null, options, request);
      }
      /// <summary>
      ///
      /// Ability for a client to subscribe to system alerts, and receive them back as they occur.
      /// The request contains specifics for what kind of alerts the client would like to receive.
      /// The client immediately receives recent alerts via the response stream, and then additional
      /// alerts as they occur.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::SAIC.Valkyrie.Api.V1.AlertsSubscriptionResponse> subscribe(global::SAIC.Valkyrie.Api.V1.ClientAlertsSubscription request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return subscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Ability for a client to subscribe to system alerts, and receive them back as they occur.
      /// The request contains specifics for what kind of alerts the client would like to receive.
      /// The client immediately receives recent alerts via the response stream, and then additional
      /// alerts as they occur.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::SAIC.Valkyrie.Api.V1.AlertsSubscriptionResponse> subscribe(global::SAIC.Valkyrie.Api.V1.ClientAlertsSubscription request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_subscribe, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override AlertsManagerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AlertsManagerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(AlertsManagerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_getVersion, serviceImpl.getVersion)
          .AddMethod(__Method_getRecentAlerts, serviceImpl.getRecentAlerts)
          .AddMethod(__Method_dismissAlert, serviceImpl.dismissAlert)
          .AddMethod(__Method_sendAlert, serviceImpl.sendAlert)
          .AddMethod(__Method_subscribe, serviceImpl.subscribe).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AlertsManagerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_getVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.VersionInfo>(serviceImpl.getVersion));
      serviceBinder.AddMethod(__Method_getRecentAlerts, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.SystemAlert>(serviceImpl.getRecentAlerts));
      serviceBinder.AddMethod(__Method_dismissAlert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SAIC.Valkyrie.Api.V1.AlertDismissalRequest, global::SAIC.Valkyrie.Api.V1.ResponseInfo>(serviceImpl.dismissAlert));
      serviceBinder.AddMethod(__Method_sendAlert, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SAIC.Valkyrie.Api.V1.SystemAlert, global::SAIC.Valkyrie.Api.V1.ResponseInfo>(serviceImpl.sendAlert));
      serviceBinder.AddMethod(__Method_subscribe, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::SAIC.Valkyrie.Api.V1.ClientAlertsSubscription, global::SAIC.Valkyrie.Api.V1.AlertsSubscriptionResponse>(serviceImpl.subscribe));
    }

  }
}
#endregion
