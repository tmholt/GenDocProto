// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Heatmap.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SAIC.Valkyrie.Api.V1 {

  /// <summary>Holder for reflection information generated from Heatmap.proto</summary>
  public static partial class HeatmapReflection {

    #region Descriptor
    /// <summary>File descriptor for Heatmap.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HeatmapReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1IZWF0bWFwLnByb3RvEhtzYWljLnZhbGt5cmllLnNkay5nZW5lcmF0ZWQa",
            "DENvbW1vbi5wcm90byLlAQoOSGVhdG1hcFJlcXVlc3QSHwoXZHJvbmVDbGFz",
            "c2lmaWNhdGlvbk9ubHkYASABKAgSHAoUY2VsbFJlc29sdXRpb25NZXRlcnMY",
            "AiABKAESSwoKaGlzdG9yaWNhbBgDIAEoCzI1LnNhaWMudmFsa3lyaWUuc2Rr",
            "LmdlbmVyYXRlZC5IZWF0bWFwSGlzdG9yaWNhbFJlcXVlc3RIABI/CgRsaXZl",
            "GAQgASgLMi8uc2FpYy52YWxreXJpZS5zZGsuZ2VuZXJhdGVkLkhlYXRtYXBM",
            "aXZlUmVxdWVzdEgAQgYKBGRhdGEiPgoYSGVhdG1hcEhpc3RvcmljYWxSZXF1",
            "ZXN0EhEKCXN0YXJ0RGF0ZRgBIAEoAxIPCgdlbmREYXRlGAIgASgDIm4KEkhl",
            "YXRtYXBMaXZlUmVxdWVzdBIdChVpbml0aWFsSGlzdG9yeVNlY29uZHMYASAB",
            "KAUSHAoUdGltZW91dFBlcmlvZFNlY29uZHMYAiABKAUSGwoTdXBkYXRlUGVy",
            "aW9kU2Vjb25kcxgDIAEoBSKAAQoPSGVhdG1hcFJlc3BvbnNlEg4KBmNlbGxJ",
            "ZBgBIAEoAxI8Cghwb3NpdGlvbhgCIAEoCzIqLnNhaWMudmFsa3lyaWUuc2Rr",
            "LmdlbmVyYXRlZC5Db29yZGluYXRlTGxhEgwKBGhpdHMYAyABKAMSEQoJaW50",
            "ZW5zaXR5GAQgASgBQmgKG3NhaWMudmFsa3lyaWUuc2RrLmdlbmVyYXRlZEIM",
            "SGVhdG1hcFByb3RvWiRnaXRodWIuY29tL3RtaG9sdC9HZW5Eb2NQcm90by9z",
            "ZGsvZ2+qAhRTQUlDLlZhbGt5cmllLkFwaS5WMWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SAIC.Valkyrie.Api.V1.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SAIC.Valkyrie.Api.V1.HeatmapRequest), global::SAIC.Valkyrie.Api.V1.HeatmapRequest.Parser, new[]{ "DroneClassificationOnly", "CellResolutionMeters", "Historical", "Live" }, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SAIC.Valkyrie.Api.V1.HeatmapHistoricalRequest), global::SAIC.Valkyrie.Api.V1.HeatmapHistoricalRequest.Parser, new[]{ "StartDate", "EndDate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SAIC.Valkyrie.Api.V1.HeatmapLiveRequest), global::SAIC.Valkyrie.Api.V1.HeatmapLiveRequest.Parser, new[]{ "InitialHistorySeconds", "TimeoutPeriodSeconds", "UpdatePeriodSeconds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SAIC.Valkyrie.Api.V1.HeatmapResponse), global::SAIC.Valkyrie.Api.V1.HeatmapResponse.Parser, new[]{ "CellId", "Position", "Hits", "Intensity" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  /// HeatmapRequest
  /// Details for a request to receive heatmap data for threats in the system
  /// </summary>
  public sealed partial class HeatmapRequest : pb::IMessage<HeatmapRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HeatmapRequest> _parser = new pb::MessageParser<HeatmapRequest>(() => new HeatmapRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HeatmapRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SAIC.Valkyrie.Api.V1.HeatmapReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HeatmapRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HeatmapRequest(HeatmapRequest other) : this() {
      droneClassificationOnly_ = other.droneClassificationOnly_;
      cellResolutionMeters_ = other.cellResolutionMeters_;
      switch (other.DataCase) {
        case DataOneofCase.Historical:
          Historical = other.Historical.Clone();
          break;
        case DataOneofCase.Live:
          Live = other.Live.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HeatmapRequest Clone() {
      return new HeatmapRequest(this);
    }

    /// <summary>Field number for the "droneClassificationOnly" field.</summary>
    public const int DroneClassificationOnlyFieldNumber = 1;
    private bool droneClassificationOnly_;
    /// <summary>
    /// whether to include only threats classified as drones or all threats in the resultant data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DroneClassificationOnly {
      get { return droneClassificationOnly_; }
      set {
        droneClassificationOnly_ = value;
      }
    }

    /// <summary>Field number for the "cellResolutionMeters" field.</summary>
    public const int CellResolutionMetersFieldNumber = 2;
    private double cellResolutionMeters_;
    /// <summary>
    /// heatmap resolution (in meters/cell)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CellResolutionMeters {
      get { return cellResolutionMeters_; }
      set {
        cellResolutionMeters_ = value;
      }
    }

    /// <summary>Field number for the "historical" field.</summary>
    public const int HistoricalFieldNumber = 3;
    /// <summary>
    /// request for historical data. OnComplete will be called once all data is transferred
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SAIC.Valkyrie.Api.V1.HeatmapHistoricalRequest Historical {
      get { return dataCase_ == DataOneofCase.Historical ? (global::SAIC.Valkyrie.Api.V1.HeatmapHistoricalRequest) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Historical;
      }
    }

    /// <summary>Field number for the "live" field.</summary>
    public const int LiveFieldNumber = 4;
    /// <summary>
    /// request for live heatmap data. results will be updated over time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SAIC.Valkyrie.Api.V1.HeatmapLiveRequest Live {
      get { return dataCase_ == DataOneofCase.Live ? (global::SAIC.Valkyrie.Api.V1.HeatmapLiveRequest) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Live;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      Historical = 3,
      Live = 4,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HeatmapRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HeatmapRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DroneClassificationOnly != other.DroneClassificationOnly) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CellResolutionMeters, other.CellResolutionMeters)) return false;
      if (!object.Equals(Historical, other.Historical)) return false;
      if (!object.Equals(Live, other.Live)) return false;
      if (DataCase != other.DataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (DroneClassificationOnly != false) hash ^= DroneClassificationOnly.GetHashCode();
      if (CellResolutionMeters != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CellResolutionMeters);
      if (dataCase_ == DataOneofCase.Historical) hash ^= Historical.GetHashCode();
      if (dataCase_ == DataOneofCase.Live) hash ^= Live.GetHashCode();
      hash ^= (int) dataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DroneClassificationOnly != false) {
        output.WriteRawTag(8);
        output.WriteBool(DroneClassificationOnly);
      }
      if (CellResolutionMeters != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(CellResolutionMeters);
      }
      if (dataCase_ == DataOneofCase.Historical) {
        output.WriteRawTag(26);
        output.WriteMessage(Historical);
      }
      if (dataCase_ == DataOneofCase.Live) {
        output.WriteRawTag(34);
        output.WriteMessage(Live);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DroneClassificationOnly != false) {
        output.WriteRawTag(8);
        output.WriteBool(DroneClassificationOnly);
      }
      if (CellResolutionMeters != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(CellResolutionMeters);
      }
      if (dataCase_ == DataOneofCase.Historical) {
        output.WriteRawTag(26);
        output.WriteMessage(Historical);
      }
      if (dataCase_ == DataOneofCase.Live) {
        output.WriteRawTag(34);
        output.WriteMessage(Live);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (DroneClassificationOnly != false) {
        size += 1 + 1;
      }
      if (CellResolutionMeters != 0D) {
        size += 1 + 8;
      }
      if (dataCase_ == DataOneofCase.Historical) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Historical);
      }
      if (dataCase_ == DataOneofCase.Live) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Live);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HeatmapRequest other) {
      if (other == null) {
        return;
      }
      if (other.DroneClassificationOnly != false) {
        DroneClassificationOnly = other.DroneClassificationOnly;
      }
      if (other.CellResolutionMeters != 0D) {
        CellResolutionMeters = other.CellResolutionMeters;
      }
      switch (other.DataCase) {
        case DataOneofCase.Historical:
          if (Historical == null) {
            Historical = new global::SAIC.Valkyrie.Api.V1.HeatmapHistoricalRequest();
          }
          Historical.MergeFrom(other.Historical);
          break;
        case DataOneofCase.Live:
          if (Live == null) {
            Live = new global::SAIC.Valkyrie.Api.V1.HeatmapLiveRequest();
          }
          Live.MergeFrom(other.Live);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DroneClassificationOnly = input.ReadBool();
            break;
          }
          case 17: {
            CellResolutionMeters = input.ReadDouble();
            break;
          }
          case 26: {
            global::SAIC.Valkyrie.Api.V1.HeatmapHistoricalRequest subBuilder = new global::SAIC.Valkyrie.Api.V1.HeatmapHistoricalRequest();
            if (dataCase_ == DataOneofCase.Historical) {
              subBuilder.MergeFrom(Historical);
            }
            input.ReadMessage(subBuilder);
            Historical = subBuilder;
            break;
          }
          case 34: {
            global::SAIC.Valkyrie.Api.V1.HeatmapLiveRequest subBuilder = new global::SAIC.Valkyrie.Api.V1.HeatmapLiveRequest();
            if (dataCase_ == DataOneofCase.Live) {
              subBuilder.MergeFrom(Live);
            }
            input.ReadMessage(subBuilder);
            Live = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            DroneClassificationOnly = input.ReadBool();
            break;
          }
          case 17: {
            CellResolutionMeters = input.ReadDouble();
            break;
          }
          case 26: {
            global::SAIC.Valkyrie.Api.V1.HeatmapHistoricalRequest subBuilder = new global::SAIC.Valkyrie.Api.V1.HeatmapHistoricalRequest();
            if (dataCase_ == DataOneofCase.Historical) {
              subBuilder.MergeFrom(Historical);
            }
            input.ReadMessage(subBuilder);
            Historical = subBuilder;
            break;
          }
          case 34: {
            global::SAIC.Valkyrie.Api.V1.HeatmapLiveRequest subBuilder = new global::SAIC.Valkyrie.Api.V1.HeatmapLiveRequest();
            if (dataCase_ == DataOneofCase.Live) {
              subBuilder.MergeFrom(Live);
            }
            input.ReadMessage(subBuilder);
            Live = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// HeatmapHistoricalRequest
  /// Details for a historical report - what data to send
  /// </summary>
  public sealed partial class HeatmapHistoricalRequest : pb::IMessage<HeatmapHistoricalRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HeatmapHistoricalRequest> _parser = new pb::MessageParser<HeatmapHistoricalRequest>(() => new HeatmapHistoricalRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HeatmapHistoricalRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SAIC.Valkyrie.Api.V1.HeatmapReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HeatmapHistoricalRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HeatmapHistoricalRequest(HeatmapHistoricalRequest other) : this() {
      startDate_ = other.startDate_;
      endDate_ = other.endDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HeatmapHistoricalRequest Clone() {
      return new HeatmapHistoricalRequest(this);
    }

    /// <summary>Field number for the "startDate" field.</summary>
    public const int StartDateFieldNumber = 1;
    private long startDate_;
    /// <summary>
    /// start of historical data to be returned
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long StartDate {
      get { return startDate_; }
      set {
        startDate_ = value;
      }
    }

    /// <summary>Field number for the "endDate" field.</summary>
    public const int EndDateFieldNumber = 2;
    private long endDate_;
    /// <summary>
    /// end of historical data to be returned
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EndDate {
      get { return endDate_; }
      set {
        endDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HeatmapHistoricalRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HeatmapHistoricalRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartDate != other.StartDate) return false;
      if (EndDate != other.EndDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (StartDate != 0L) hash ^= StartDate.GetHashCode();
      if (EndDate != 0L) hash ^= EndDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StartDate != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StartDate);
      }
      if (EndDate != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EndDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StartDate != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StartDate);
      }
      if (EndDate != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EndDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (StartDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartDate);
      }
      if (EndDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HeatmapHistoricalRequest other) {
      if (other == null) {
        return;
      }
      if (other.StartDate != 0L) {
        StartDate = other.StartDate;
      }
      if (other.EndDate != 0L) {
        EndDate = other.EndDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartDate = input.ReadInt64();
            break;
          }
          case 16: {
            EndDate = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StartDate = input.ReadInt64();
            break;
          }
          case 16: {
            EndDate = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// HeatmapLiveRequest
  /// Details for a live report - what data to send
  /// </summary>
  public sealed partial class HeatmapLiveRequest : pb::IMessage<HeatmapLiveRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HeatmapLiveRequest> _parser = new pb::MessageParser<HeatmapLiveRequest>(() => new HeatmapLiveRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HeatmapLiveRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SAIC.Valkyrie.Api.V1.HeatmapReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HeatmapLiveRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HeatmapLiveRequest(HeatmapLiveRequest other) : this() {
      initialHistorySeconds_ = other.initialHistorySeconds_;
      timeoutPeriodSeconds_ = other.timeoutPeriodSeconds_;
      updatePeriodSeconds_ = other.updatePeriodSeconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HeatmapLiveRequest Clone() {
      return new HeatmapLiveRequest(this);
    }

    /// <summary>Field number for the "initialHistorySeconds" field.</summary>
    public const int InitialHistorySecondsFieldNumber = 1;
    private int initialHistorySeconds_;
    /// <summary>
    /// how far back (in seconds) to include in the initial response to this request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InitialHistorySeconds {
      get { return initialHistorySeconds_; }
      set {
        initialHistorySeconds_ = value;
      }
    }

    /// <summary>Field number for the "timeoutPeriodSeconds" field.</summary>
    public const int TimeoutPeriodSecondsFieldNumber = 2;
    private int timeoutPeriodSeconds_;
    /// <summary>
    /// if threats should be timed out of the report data. if so, how old the data should
    /// be in order to be timed out (in seconds)
    /// NOTE: if timeoutPeriod >= initialHistory then all initialHistory will immediately
    ///       be timed out
    /// NOTE: setting this value to 0 means do not time out threats from the heatmap data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TimeoutPeriodSeconds {
      get { return timeoutPeriodSeconds_; }
      set {
        timeoutPeriodSeconds_ = value;
      }
    }

    /// <summary>Field number for the "updatePeriodSeconds" field.</summary>
    public const int UpdatePeriodSecondsFieldNumber = 3;
    private int updatePeriodSeconds_;
    /// <summary>
    /// how often to send updates
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UpdatePeriodSeconds {
      get { return updatePeriodSeconds_; }
      set {
        updatePeriodSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HeatmapLiveRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HeatmapLiveRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InitialHistorySeconds != other.InitialHistorySeconds) return false;
      if (TimeoutPeriodSeconds != other.TimeoutPeriodSeconds) return false;
      if (UpdatePeriodSeconds != other.UpdatePeriodSeconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (InitialHistorySeconds != 0) hash ^= InitialHistorySeconds.GetHashCode();
      if (TimeoutPeriodSeconds != 0) hash ^= TimeoutPeriodSeconds.GetHashCode();
      if (UpdatePeriodSeconds != 0) hash ^= UpdatePeriodSeconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (InitialHistorySeconds != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InitialHistorySeconds);
      }
      if (TimeoutPeriodSeconds != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TimeoutPeriodSeconds);
      }
      if (UpdatePeriodSeconds != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UpdatePeriodSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (InitialHistorySeconds != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InitialHistorySeconds);
      }
      if (TimeoutPeriodSeconds != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TimeoutPeriodSeconds);
      }
      if (UpdatePeriodSeconds != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UpdatePeriodSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (InitialHistorySeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitialHistorySeconds);
      }
      if (TimeoutPeriodSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeoutPeriodSeconds);
      }
      if (UpdatePeriodSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpdatePeriodSeconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HeatmapLiveRequest other) {
      if (other == null) {
        return;
      }
      if (other.InitialHistorySeconds != 0) {
        InitialHistorySeconds = other.InitialHistorySeconds;
      }
      if (other.TimeoutPeriodSeconds != 0) {
        TimeoutPeriodSeconds = other.TimeoutPeriodSeconds;
      }
      if (other.UpdatePeriodSeconds != 0) {
        UpdatePeriodSeconds = other.UpdatePeriodSeconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InitialHistorySeconds = input.ReadInt32();
            break;
          }
          case 16: {
            TimeoutPeriodSeconds = input.ReadInt32();
            break;
          }
          case 24: {
            UpdatePeriodSeconds = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            InitialHistorySeconds = input.ReadInt32();
            break;
          }
          case 16: {
            TimeoutPeriodSeconds = input.ReadInt32();
            break;
          }
          case 24: {
            UpdatePeriodSeconds = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  /// HeatmapResponse
  /// Heatmap data returned from the server based on a call to ThreatsManager.getHeatmap
  /// </summary>
  public sealed partial class HeatmapResponse : pb::IMessage<HeatmapResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HeatmapResponse> _parser = new pb::MessageParser<HeatmapResponse>(() => new HeatmapResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HeatmapResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SAIC.Valkyrie.Api.V1.HeatmapReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HeatmapResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HeatmapResponse(HeatmapResponse other) : this() {
      cellId_ = other.cellId_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      hits_ = other.hits_;
      intensity_ = other.intensity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HeatmapResponse Clone() {
      return new HeatmapResponse(this);
    }

    /// <summary>Field number for the "cellId" field.</summary>
    public const int CellIdFieldNumber = 1;
    private long cellId_;
    /// <summary>
    /// a unique identifier for this heatmap cell. Used for updating existing data for live heatmaps
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CellId {
      get { return cellId_; }
      set {
        cellId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::SAIC.Valkyrie.Api.V1.CoordinateLla position_;
    /// <summary>
    /// heatmap cell location
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::SAIC.Valkyrie.Api.V1.CoordinateLla Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "hits" field.</summary>
    public const int HitsFieldNumber = 3;
    private long hits_;
    /// <summary>
    /// the raw data of how many hits have been in this cell
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Hits {
      get { return hits_; }
      set {
        hits_ = value;
      }
    }

    /// <summary>Field number for the "intensity" field.</summary>
    public const int IntensityFieldNumber = 4;
    private double intensity_;
    /// <summary>
    /// calculated relative intensity compared to other cells (0-1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Intensity {
      get { return intensity_; }
      set {
        intensity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HeatmapResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HeatmapResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CellId != other.CellId) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (Hits != other.Hits) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Intensity, other.Intensity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (CellId != 0L) hash ^= CellId.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Hits != 0L) hash ^= Hits.GetHashCode();
      if (Intensity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Intensity);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CellId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CellId);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (Hits != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Hits);
      }
      if (Intensity != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Intensity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CellId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CellId);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (Hits != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Hits);
      }
      if (Intensity != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Intensity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (CellId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CellId);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Hits != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Hits);
      }
      if (Intensity != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HeatmapResponse other) {
      if (other == null) {
        return;
      }
      if (other.CellId != 0L) {
        CellId = other.CellId;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::SAIC.Valkyrie.Api.V1.CoordinateLla();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Hits != 0L) {
        Hits = other.Hits;
      }
      if (other.Intensity != 0D) {
        Intensity = other.Intensity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CellId = input.ReadInt64();
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::SAIC.Valkyrie.Api.V1.CoordinateLla();
            }
            input.ReadMessage(Position);
            break;
          }
          case 24: {
            Hits = input.ReadInt64();
            break;
          }
          case 33: {
            Intensity = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CellId = input.ReadInt64();
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::SAIC.Valkyrie.Api.V1.CoordinateLla();
            }
            input.ReadMessage(Position);
            break;
          }
          case 24: {
            Hits = input.ReadInt64();
            break;
          }
          case 33: {
            Intensity = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
