// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: DevicesManager.proto
// </auto-generated>
// Original file comments:
// ------------------------------------------------------------------------------
// | SAIC PROPRIETARY INFORMATION
// |-------------------------------------------------------------------------------
// | The information in this document is proprietary to SAIC. It may not be used,
// | reproduced, disclosed, or exported without the written approval of SAIC.
// ------------------------------------------------------------------------------
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace SAIC.Valkyrie.Api.V1 {
  /// <summary>
  ///
  /// The devices manager service provides public calls into the VALKYRIE system for
  /// device-related actions and data retrieval. The client can request the list of active devices, the
  /// status for each device, and subscribe to device status events as they occur. The devices
  /// manager also supports the ability for a client to register as a handler for devices
  /// external to Valkyrie. Once registered, client devices can send status and tracks into the system,
  /// and receive commands from the Valkyrie system.
  /// </summary>
  public static partial class DevicesManager
  {
    static readonly string __ServiceName = "saic.valkyrie.sdk.generated.DevicesManager";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.VersionInfo> __Marshaller_saic_valkyrie_sdk_generated_VersionInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.VersionInfo.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.DeviceConfiguration> __Marshaller_saic_valkyrie_sdk_generated_DeviceConfiguration = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.DeviceConfiguration.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.DeviceStatus> __Marshaller_saic_valkyrie_sdk_generated_DeviceStatus = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.DeviceStatus.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.ResponseInfo> __Marshaller_saic_valkyrie_sdk_generated_ResponseInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.ResponseInfo.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.DevicesManagerSubscription> __Marshaller_saic_valkyrie_sdk_generated_DevicesManagerSubscription = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.DevicesManagerSubscription.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.DevicesManagerSubscriptionResponse> __Marshaller_saic_valkyrie_sdk_generated_DevicesManagerSubscriptionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.DevicesManagerSubscriptionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.DeviceHandlerResponse> __Marshaller_saic_valkyrie_sdk_generated_DeviceHandlerResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.DeviceHandlerResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.DeviceHandlerRequest> __Marshaller_saic_valkyrie_sdk_generated_DeviceHandlerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.DeviceHandlerRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.DeviceCommandInfo> __Marshaller_saic_valkyrie_sdk_generated_DeviceCommandInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.DeviceCommandInfo.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::SAIC.Valkyrie.Api.V1.BarrageResponse> __Marshaller_saic_valkyrie_sdk_generated_BarrageResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SAIC.Valkyrie.Api.V1.BarrageResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.VersionInfo> __Method_getVersion = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.VersionInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getVersion",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_saic_valkyrie_sdk_generated_VersionInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.DeviceConfiguration> __Method_getDevices = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.DeviceConfiguration>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "getDevices",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_saic_valkyrie_sdk_generated_DeviceConfiguration);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.DeviceStatus> __Method_getStatuses = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.DeviceStatus>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "getStatuses",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_saic_valkyrie_sdk_generated_DeviceStatus);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.ResponseInfo> __Method_requestStatus = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.ResponseInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "requestStatus",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_saic_valkyrie_sdk_generated_ResponseInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::SAIC.Valkyrie.Api.V1.DevicesManagerSubscription, global::SAIC.Valkyrie.Api.V1.DevicesManagerSubscriptionResponse> __Method_subscribe = new grpc::Method<global::SAIC.Valkyrie.Api.V1.DevicesManagerSubscription, global::SAIC.Valkyrie.Api.V1.DevicesManagerSubscriptionResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "subscribe",
        __Marshaller_saic_valkyrie_sdk_generated_DevicesManagerSubscription,
        __Marshaller_saic_valkyrie_sdk_generated_DevicesManagerSubscriptionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::SAIC.Valkyrie.Api.V1.DeviceHandlerResponse, global::SAIC.Valkyrie.Api.V1.DeviceHandlerRequest> __Method_registerClientDeviceHandler = new grpc::Method<global::SAIC.Valkyrie.Api.V1.DeviceHandlerResponse, global::SAIC.Valkyrie.Api.V1.DeviceHandlerRequest>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "registerClientDeviceHandler",
        __Marshaller_saic_valkyrie_sdk_generated_DeviceHandlerResponse,
        __Marshaller_saic_valkyrie_sdk_generated_DeviceHandlerRequest);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::SAIC.Valkyrie.Api.V1.DeviceCommandInfo, global::SAIC.Valkyrie.Api.V1.ResponseInfo> __Method_sendDeviceCommand = new grpc::Method<global::SAIC.Valkyrie.Api.V1.DeviceCommandInfo, global::SAIC.Valkyrie.Api.V1.ResponseInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "sendDeviceCommand",
        __Marshaller_saic_valkyrie_sdk_generated_DeviceCommandInfo,
        __Marshaller_saic_valkyrie_sdk_generated_ResponseInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.BarrageResponse> __Method_barrage = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.BarrageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "barrage",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_saic_valkyrie_sdk_generated_BarrageResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SAIC.Valkyrie.Api.V1.DevicesManagerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DevicesManager</summary>
    [grpc::BindServiceMethod(typeof(DevicesManager), "BindService")]
    public abstract partial class DevicesManagerBase
    {
      /// <summary>
      ///
      /// Retrieves version information for the DevicesManager service.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::SAIC.Valkyrie.Api.V1.VersionInfo> getVersion(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// Get the set of configured devices maintained within the devices manager. This returns
      /// the configuration information for each pre-defined device. &lt;br/>
      /// Input parameters: none &lt;br/>
      /// Output: DeviceConfiguration stream, containing one response per defined device in the system.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task getDevices(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::IServerStreamWriter<global::SAIC.Valkyrie.Api.V1.DeviceConfiguration> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// Get the most recent set of device statuses maintained within the devices manager. &lt;br/>
      /// Input parameters: none &lt;br/>
      /// Output: DeviceStatus stream, containing one response per defined device in the system
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task getStatuses(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::IServerStreamWriter<global::SAIC.Valkyrie.Api.V1.DeviceStatus> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// This call triggers all devices in the system to send out the most recent status
      /// message, which will be sent to the client via its subscribe() stream. &lt;br/>
      /// Input parameters: none &lt;br/>
      /// Output: ResponseInfo class contains success/failure, plus a description on failure
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::SAIC.Valkyrie.Api.V1.ResponseInfo> requestStatus(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// Subscribes to status from devices within the devices manager. The client will continue
      /// to receive DeviceStatus objects until the request is cancelled (see cancelSubscription)
      /// or the server is shut down. &lt;br/>
      /// Input parameters: DevicesManagerSubscription contains details for the subscription request. &lt;br/>
      /// Output: An async stream over which DeviceStatus messages will be received as they
      ///         occur in the system
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task subscribe(global::SAIC.Valkyrie.Api.V1.DevicesManagerSubscription request, grpc::IServerStreamWriter<global::SAIC.Valkyrie.Api.V1.DevicesManagerSubscriptionResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// This call provides the ability to register a client as a handler for system devices.
      /// This client will be responsible for pushing status and tracks for registered devices.
      /// These devices will need to be defined within the DON configuration file, with the Owner
      /// property set to the client name that will be the owner for that device.
      /// Upon completion of this call, the client should send a DeviceHandlerResponse across the
      /// input stream with a type of DeviceRegistrationResponse for each device that client
      /// would like to own. &lt;br/>
      /// Input parameters: the input DeviceHandlerResponse stream, over which the client will
      ///                   send registration, device status, and device tracks. &lt;br/>
      /// Output: the output DeviceHandlerRequest stream, over which the the server will
      ///         send commands and responses to the client
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task registerClientDeviceHandler(grpc::IAsyncStreamReader<global::SAIC.Valkyrie.Api.V1.DeviceHandlerResponse> requestStream, grpc::IServerStreamWriter<global::SAIC.Valkyrie.Api.V1.DeviceHandlerRequest> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// Support for sending a command to a device. &lt;br/>
      /// Input parameters: details about the command to send (and to whom) &lt;br/>
      /// Output: ResponseInfo class contains success/failure, plus a description on failure
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::SAIC.Valkyrie.Api.V1.ResponseInfo> sendDeviceCommand(global::SAIC.Valkyrie.Api.V1.DeviceCommandInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// Turn on all device capabilities that support the barrage command, which is defined in the device configuration. &lt;br/>
      /// Input parameters: none &lt;br/>
      /// Output: BarrageResponse class contains success/failure, plus the collection of individual command responses
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::SAIC.Valkyrie.Api.V1.BarrageResponse> barrage(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DevicesManager</summary>
    public partial class DevicesManagerClient : grpc::ClientBase<DevicesManagerClient>
    {
      /// <summary>Creates a new client for DevicesManager</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DevicesManagerClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DevicesManager that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DevicesManagerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DevicesManagerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DevicesManagerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///
      /// Retrieves version information for the DevicesManager service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.VersionInfo getVersion(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Retrieves version information for the DevicesManager service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.VersionInfo getVersion(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getVersion, null, options, request);
      }
      /// <summary>
      ///
      /// Retrieves version information for the DevicesManager service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.VersionInfo> getVersionAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Retrieves version information for the DevicesManager service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.VersionInfo> getVersionAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getVersion, null, options, request);
      }
      /// <summary>
      ///
      /// Get the set of configured devices maintained within the devices manager. This returns
      /// the configuration information for each pre-defined device. &lt;br/>
      /// Input parameters: none &lt;br/>
      /// Output: DeviceConfiguration stream, containing one response per defined device in the system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::SAIC.Valkyrie.Api.V1.DeviceConfiguration> getDevices(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getDevices(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Get the set of configured devices maintained within the devices manager. This returns
      /// the configuration information for each pre-defined device. &lt;br/>
      /// Input parameters: none &lt;br/>
      /// Output: DeviceConfiguration stream, containing one response per defined device in the system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::SAIC.Valkyrie.Api.V1.DeviceConfiguration> getDevices(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_getDevices, null, options, request);
      }
      /// <summary>
      ///
      /// Get the most recent set of device statuses maintained within the devices manager. &lt;br/>
      /// Input parameters: none &lt;br/>
      /// Output: DeviceStatus stream, containing one response per defined device in the system
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::SAIC.Valkyrie.Api.V1.DeviceStatus> getStatuses(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getStatuses(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Get the most recent set of device statuses maintained within the devices manager. &lt;br/>
      /// Input parameters: none &lt;br/>
      /// Output: DeviceStatus stream, containing one response per defined device in the system
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::SAIC.Valkyrie.Api.V1.DeviceStatus> getStatuses(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_getStatuses, null, options, request);
      }
      /// <summary>
      ///
      /// This call triggers all devices in the system to send out the most recent status
      /// message, which will be sent to the client via its subscribe() stream. &lt;br/>
      /// Input parameters: none &lt;br/>
      /// Output: ResponseInfo class contains success/failure, plus a description on failure
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.ResponseInfo requestStatus(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return requestStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// This call triggers all devices in the system to send out the most recent status
      /// message, which will be sent to the client via its subscribe() stream. &lt;br/>
      /// Input parameters: none &lt;br/>
      /// Output: ResponseInfo class contains success/failure, plus a description on failure
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.ResponseInfo requestStatus(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_requestStatus, null, options, request);
      }
      /// <summary>
      ///
      /// This call triggers all devices in the system to send out the most recent status
      /// message, which will be sent to the client via its subscribe() stream. &lt;br/>
      /// Input parameters: none &lt;br/>
      /// Output: ResponseInfo class contains success/failure, plus a description on failure
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.ResponseInfo> requestStatusAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return requestStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// This call triggers all devices in the system to send out the most recent status
      /// message, which will be sent to the client via its subscribe() stream. &lt;br/>
      /// Input parameters: none &lt;br/>
      /// Output: ResponseInfo class contains success/failure, plus a description on failure
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.ResponseInfo> requestStatusAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_requestStatus, null, options, request);
      }
      /// <summary>
      ///
      /// Subscribes to status from devices within the devices manager. The client will continue
      /// to receive DeviceStatus objects until the request is cancelled (see cancelSubscription)
      /// or the server is shut down. &lt;br/>
      /// Input parameters: DevicesManagerSubscription contains details for the subscription request. &lt;br/>
      /// Output: An async stream over which DeviceStatus messages will be received as they
      ///         occur in the system
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::SAIC.Valkyrie.Api.V1.DevicesManagerSubscriptionResponse> subscribe(global::SAIC.Valkyrie.Api.V1.DevicesManagerSubscription request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return subscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Subscribes to status from devices within the devices manager. The client will continue
      /// to receive DeviceStatus objects until the request is cancelled (see cancelSubscription)
      /// or the server is shut down. &lt;br/>
      /// Input parameters: DevicesManagerSubscription contains details for the subscription request. &lt;br/>
      /// Output: An async stream over which DeviceStatus messages will be received as they
      ///         occur in the system
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::SAIC.Valkyrie.Api.V1.DevicesManagerSubscriptionResponse> subscribe(global::SAIC.Valkyrie.Api.V1.DevicesManagerSubscription request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_subscribe, null, options, request);
      }
      /// <summary>
      ///
      /// This call provides the ability to register a client as a handler for system devices.
      /// This client will be responsible for pushing status and tracks for registered devices.
      /// These devices will need to be defined within the DON configuration file, with the Owner
      /// property set to the client name that will be the owner for that device.
      /// Upon completion of this call, the client should send a DeviceHandlerResponse across the
      /// input stream with a type of DeviceRegistrationResponse for each device that client
      /// would like to own. &lt;br/>
      /// Input parameters: the input DeviceHandlerResponse stream, over which the client will
      ///                   send registration, device status, and device tracks. &lt;br/>
      /// Output: the output DeviceHandlerRequest stream, over which the the server will
      ///         send commands and responses to the client
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::SAIC.Valkyrie.Api.V1.DeviceHandlerResponse, global::SAIC.Valkyrie.Api.V1.DeviceHandlerRequest> registerClientDeviceHandler(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return registerClientDeviceHandler(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// This call provides the ability to register a client as a handler for system devices.
      /// This client will be responsible for pushing status and tracks for registered devices.
      /// These devices will need to be defined within the DON configuration file, with the Owner
      /// property set to the client name that will be the owner for that device.
      /// Upon completion of this call, the client should send a DeviceHandlerResponse across the
      /// input stream with a type of DeviceRegistrationResponse for each device that client
      /// would like to own. &lt;br/>
      /// Input parameters: the input DeviceHandlerResponse stream, over which the client will
      ///                   send registration, device status, and device tracks. &lt;br/>
      /// Output: the output DeviceHandlerRequest stream, over which the the server will
      ///         send commands and responses to the client
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::SAIC.Valkyrie.Api.V1.DeviceHandlerResponse, global::SAIC.Valkyrie.Api.V1.DeviceHandlerRequest> registerClientDeviceHandler(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_registerClientDeviceHandler, null, options);
      }
      /// <summary>
      ///
      /// Support for sending a command to a device. &lt;br/>
      /// Input parameters: details about the command to send (and to whom) &lt;br/>
      /// Output: ResponseInfo class contains success/failure, plus a description on failure
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.ResponseInfo sendDeviceCommand(global::SAIC.Valkyrie.Api.V1.DeviceCommandInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return sendDeviceCommand(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Support for sending a command to a device. &lt;br/>
      /// Input parameters: details about the command to send (and to whom) &lt;br/>
      /// Output: ResponseInfo class contains success/failure, plus a description on failure
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.ResponseInfo sendDeviceCommand(global::SAIC.Valkyrie.Api.V1.DeviceCommandInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_sendDeviceCommand, null, options, request);
      }
      /// <summary>
      ///
      /// Support for sending a command to a device. &lt;br/>
      /// Input parameters: details about the command to send (and to whom) &lt;br/>
      /// Output: ResponseInfo class contains success/failure, plus a description on failure
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.ResponseInfo> sendDeviceCommandAsync(global::SAIC.Valkyrie.Api.V1.DeviceCommandInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return sendDeviceCommandAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Support for sending a command to a device. &lt;br/>
      /// Input parameters: details about the command to send (and to whom) &lt;br/>
      /// Output: ResponseInfo class contains success/failure, plus a description on failure
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.ResponseInfo> sendDeviceCommandAsync(global::SAIC.Valkyrie.Api.V1.DeviceCommandInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_sendDeviceCommand, null, options, request);
      }
      /// <summary>
      ///
      /// Turn on all device capabilities that support the barrage command, which is defined in the device configuration. &lt;br/>
      /// Input parameters: none &lt;br/>
      /// Output: BarrageResponse class contains success/failure, plus the collection of individual command responses
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.BarrageResponse barrage(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return barrage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Turn on all device capabilities that support the barrage command, which is defined in the device configuration. &lt;br/>
      /// Input parameters: none &lt;br/>
      /// Output: BarrageResponse class contains success/failure, plus the collection of individual command responses
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::SAIC.Valkyrie.Api.V1.BarrageResponse barrage(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_barrage, null, options, request);
      }
      /// <summary>
      ///
      /// Turn on all device capabilities that support the barrage command, which is defined in the device configuration. &lt;br/>
      /// Input parameters: none &lt;br/>
      /// Output: BarrageResponse class contains success/failure, plus the collection of individual command responses
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.BarrageResponse> barrageAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return barrageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Turn on all device capabilities that support the barrage command, which is defined in the device configuration. &lt;br/>
      /// Input parameters: none &lt;br/>
      /// Output: BarrageResponse class contains success/failure, plus the collection of individual command responses
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::SAIC.Valkyrie.Api.V1.BarrageResponse> barrageAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_barrage, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override DevicesManagerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DevicesManagerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(DevicesManagerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_getVersion, serviceImpl.getVersion)
          .AddMethod(__Method_getDevices, serviceImpl.getDevices)
          .AddMethod(__Method_getStatuses, serviceImpl.getStatuses)
          .AddMethod(__Method_requestStatus, serviceImpl.requestStatus)
          .AddMethod(__Method_subscribe, serviceImpl.subscribe)
          .AddMethod(__Method_registerClientDeviceHandler, serviceImpl.registerClientDeviceHandler)
          .AddMethod(__Method_sendDeviceCommand, serviceImpl.sendDeviceCommand)
          .AddMethod(__Method_barrage, serviceImpl.barrage).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DevicesManagerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_getVersion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.VersionInfo>(serviceImpl.getVersion));
      serviceBinder.AddMethod(__Method_getDevices, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.DeviceConfiguration>(serviceImpl.getDevices));
      serviceBinder.AddMethod(__Method_getStatuses, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.DeviceStatus>(serviceImpl.getStatuses));
      serviceBinder.AddMethod(__Method_requestStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.ResponseInfo>(serviceImpl.requestStatus));
      serviceBinder.AddMethod(__Method_subscribe, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::SAIC.Valkyrie.Api.V1.DevicesManagerSubscription, global::SAIC.Valkyrie.Api.V1.DevicesManagerSubscriptionResponse>(serviceImpl.subscribe));
      serviceBinder.AddMethod(__Method_registerClientDeviceHandler, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::SAIC.Valkyrie.Api.V1.DeviceHandlerResponse, global::SAIC.Valkyrie.Api.V1.DeviceHandlerRequest>(serviceImpl.registerClientDeviceHandler));
      serviceBinder.AddMethod(__Method_sendDeviceCommand, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SAIC.Valkyrie.Api.V1.DeviceCommandInfo, global::SAIC.Valkyrie.Api.V1.ResponseInfo>(serviceImpl.sendDeviceCommand));
      serviceBinder.AddMethod(__Method_barrage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::SAIC.Valkyrie.Api.V1.BarrageResponse>(serviceImpl.barrage));
    }

  }
}
#endregion
