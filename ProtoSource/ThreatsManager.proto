syntax = "proto3";

import "google/protobuf/empty.proto";
import "Common.proto";
import "Threats.proto";
import "Filter.proto";
import "Heatmap.proto";

package saic.valkyrie.sdk.generated;
option java_package = "saic.valkyrie.sdk.generated";
option java_outer_classname = "ThreatsManagerProto";
option csharp_namespace = "SAIC.Valkyrie.Api.V1";

//
// ThreatsManager
// The threats manager service provides public calls into the VALKYRIE system for
// threat-related actions. The client can subscribe to threats as
// they occur. This interface also supports addition of threats into the system.
//
service ThreatsManager {

  //
  // getVersion
  // Get the version of the threats manager.
  // Input parameters: none
  // Output: VersionInfo proto class, containing version details
  //

  rpc getVersion (google.protobuf.Empty) returns (VersionInfo);

  //
  // subscribe
  // Subscribe to either threats from the valkyrie correlation application or user affiliations changes.
  // stream without a definitive end to the set. The client will continue to receive
  // ThreatsManagerSubscriptionResponse objects until the request is made to stop or the server is shut down.
  // Input: Details about the subscription for this client
  // Output: The stream through which the changes will be received by the client as they
  // occur within the VALKYRIE system.
  //
  rpc subscribe (ThreatsManagerSubscription) returns (stream ThreatsManagerSubscriptionResponse);

  //
  // addThreat
  // Ability to add a complete threat into the DON system. This will bypass the
  // VALKYRIE correlator, and will instead act as if it came from the correlator
  // and into our threat prioritization process.
  // Input: The threat definition and insertion details to include into the VALKYRIE system
  // Output: A standard response class with success/failure information
  //
  rpc addThreat (ThreatAdditionDetails) returns (ResponseInfo);

  //
  // setAffiliation
  // Ability to overwrite the Affiliation of a threat that already exists in the
  // system. Should behave the same as if the HMI operator made an affiliation
  // change.
  // Input: The client threat affiliation definition
  // Output: A standard response class with success/failure information
  //
  rpc setAffiliation (TargetAffiliationInfo) returns (ResponseInfo);

  //
  // getAffiliations
  // Ability to request user affiliations changes.
  //
  // Input: None
  // Output: A stream of TargetAffiliationInfo objects containing the threat IDs and associated
  // affiliations
  //
  rpc getAffiliations (google.protobuf.Empty) returns (stream TargetAffiliationInfo);

  //
  // setClassification
  // Ability to overwrite the Classification of a threat that already exists in the
  // system. Should behave the same as if the HMI operator made a classification change.
  // Input: The client threat classification definition
  // Output: A standard response class with success/failure information
  //
  rpc setClassification (TargetClassificationInfo) returns (ResponseInfo);

  //
  // getClassifications
  // Ability to request user classifications changes.
  //
  // Input: None
  // Output: A stream of TargetClassificationInfo objects containing the threat IDs and associated
  // classifications
  //
  rpc getClassifications (google.protobuf.Empty) returns (stream TargetClassificationInfo);

  //
  // getThreats
  // Ability to request all threats currently in the system.
  //
  // Input: None
  // Output: A stream of ThreatInfo objects
  //
  rpc getThreats (google.protobuf.Empty) returns (stream ThreatInfo);

  //
  // getThreat
  // Ability to request one or more specific threats currently in the system
  // based on a known threat id.
  //
  // Input: None
  // Output: A stream of matching ThreatInfo objects
  //
  rpc getThreat (ThreatDetailsRequest) returns (stream ThreatInfo);

  //
  // subscribeToHeatmap
  // Ability to request heatmap data for threats in the system.
  //
  // Input: Definition of the heatmap data to receive
  // Output: A stream of matching HeatmapResult values. Note that the
  // server will only call onComplete on the return stream if the data requested
  // is purely historical. Otherwise data will continue to be streamed until cancel
  // is called by the receiver.
  // https://stackoverflow.com/questions/63250570/how-to-cancel-a-grpc-streaming-call
  //
  rpc subscribeToHeatmap (HeatmapRequest) returns (stream HeatmapResponse);

}

//
// ThreatDetailsRequest
// A request to get the details for one or more threat ids
//
message ThreatDetailsRequest {
  repeated int64 threatId = 1;
}

//
// ThreatAdditionDetails
// details for adding a threat into the Valkyrie system
// NOTE: Keeping this around, even with one "detail," for possible future information keeping
//
message ThreatAdditionDetails {
  reserved 1; //formerly used for ThreatAdditionPosition
  ThreatInfo threat = 2; // the threat to be added
}

//
// ThreatsManagerSubscription
// The ThreatsManager subscription.
// Allows the client to choose what to subscribe to from the ThreatsManager.
//
message ThreatsManagerSubscription {
  bool subscribeToAffiliations = 1; // whether to subscribe to affiliations changes
  bool subscribeToThreats = 2;  // whether to subscribe to outbound threats
  bool subscribeToFilterSummary = 3;  // whether to subscribe to a filter summary
  FilterConfig filters = 4; // filter to include. may contain many rules
  bool subscribeToClassifications = 5; // whether to subscribe to classifications changes
}

//
// TargetClassificationInfo
// Ability to get/set the classification type for a target given its ID.
//
message TargetClassificationInfo {
  TargetIdentifier target = 1; // the target
  TargetClassification classification = 2; // the classification of the target
}

//
// ThreatClassificationResponse
// The response for user classification change subscriptions.
//
message ThreatClassificationResponse {
  TargetClassificationInfo classificationInfo = 1; // the user classification info
  bool hasTimedOut = 2; // whether the threat has timed out. Useful in case the client is not also subscribed to threats.
}

//
// ThreatAffiliationResponse
// The response for user affiliation change subscriptions.
//
message ThreatAffiliationResponse {
  TargetAffiliationInfo affiliationInfo = 1; // the user affiliation info
  bool hasTimedOut = 2; // whether the threat has timed out. Useful in case the client is not also subscribed to threats.
}

//
// FilterSummary
// This message includes the number of threats that have been filtered for a subscription
//
message FilterSummary {
  int64 threatsFiltered = 1;  // The number of threats that have been filtered
}

//
// ThreatsManagerSubscriptionResponse
// The response to expect when subscribed to ThreatsManager.
// Based on client subscription it could be a threat, a filter summary, or an affiliation change
//
message ThreatsManagerSubscriptionResponse {
  oneof data {
    ThreatInfo threat = 1;      // A ThreatInfo message containing the details of a threat
    FilterSummary filterSummary = 2;   // A message containing the number of threats that have been filtered
    ThreatAffiliationResponse affiliation = 3; // A message containing user affiliation changes
    ThreatClassificationResponse classification = 4; // A message containing user classification changes
  }
}


