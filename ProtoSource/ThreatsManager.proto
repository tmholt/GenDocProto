syntax = "proto3";

import "google/protobuf/empty.proto";
import "Common.proto";
import "Threats.proto";
import "Filter.proto";
import "Heatmap.proto";

package saic.valkyrie.sdk.generated;
option java_package = "saic.valkyrie.sdk.generated";
option java_outer_classname = "ThreatsManagerProto";
option csharp_namespace = "SAIC.Valkyrie.Api.V1";

//
// The threats manager service provides public calls into the Valkyrie system for
// threat-related actions. The client can subscribe to threats as
// they occur. This interface also supports addition of threats into the system.
//
service ThreatsManager {

  //
  // Retrieves version information for the SystemsManager service.
  //
  rpc getVersion (google.protobuf.Empty) returns (VersionInfo);

  //
  // Subscribe to the threats manager for threats, user affiliation, and user classification changes.
  // The client will receive ThreatsManagerSubscriptionResponse objects until the subscription is cancelled. <br/>
  // Input: Details about the subscription for this client <br/>
  // Output: The output stream of threats manager events to the subscribed client
  //
  rpc subscribe (ThreatsManagerSubscription) returns (stream ThreatsManagerSubscriptionResponse);

  //
  // Ability to add a complete threat into the Valkyrie system. This will bypass the
  // Valkyrie correlator, and will instead feed it into the threats pipeline, which includes
  // going through the threat prioritization process and sending it to subscribed clients. <br/>
  // Input: The threat details to include into the VALKYRIE system <br/>
  // Output: A standard response class with success/failure information
  //
  rpc addThreat (ThreatAdditionDetails) returns (ResponseInfo);

  //
  // Ability to override the affiliation of an existing threat in the system.  <br/>
  // Input: The client threat affiliation definition <br/>
  // Output: A standard response class with success/failure information
  //
  rpc setAffiliation (TargetAffiliationInfo) returns (ResponseInfo);

  //
  // Ability to request all user-defined threat affiliations. Returns a stream of
  // {@link TargetAffiliationInfo} objects containing the threat IDs and defined
  // affiliations.
  //
  rpc getAffiliations (google.protobuf.Empty) returns (stream TargetAffiliationInfo);

  //
  // Ability to override the classification of an existing threat in the system. <br/>
  // Input: The client threat classification definition <br/>
  // Output: A standard response class with success/failure information
  //
  rpc setClassification (TargetClassificationInfo) returns (ResponseInfo);

  //
  // Ability to request all user-defined threat classifications. Returns a stream of
  // {@link TargetClassificationInfo} objects containing the threat IDs and defined
  // classifications.
  //
  rpc getClassifications (google.protobuf.Empty) returns (stream TargetClassificationInfo);

  //
  // Ability to request all threats currently in the system. Returns a stream
  // of ThreatInfo objects.
  //
  rpc getThreats (google.protobuf.Empty) returns (stream ThreatInfo);

  //
  // Ability to request one or more specific threats currently in the system
  // based on a set of known threat ids.
  //
  rpc getThreat (ThreatDetailsRequest) returns (stream ThreatInfo);

  //
  // subscribeToHeatmap
  // Ability to request heatmap data for threats in the system.
  //
  // Input: Definition of the heatmap data to receive
  // Output: A stream of matching HeatmapResult values. Note that the
  // server will only call onComplete on the return stream if the data requested
  // is purely historical. Otherwise data will continue to be streamed until cancel
  // is called by the receiver.
  // https://stackoverflow.com/questions/63250570/how-to-cancel-a-grpc-streaming-call
  //
  rpc subscribeToHeatmap (HeatmapRequest) returns (stream HeatmapResponse);

}

//
// The ThreatDetailsRequest message contains input details for the  {@link getThreat} call
// on the threats manager. Contains 1 or more threat ids to get the threat details for.
//
message ThreatDetailsRequest {
  repeated int64 threatId = 1;
}

//
// The ThreatAdditionDetails message contains details for adding a threat into the Valkyrie system.
// NOTE: Keeping this around, even with one "detail," for possible future information keeping.
//
message ThreatAdditionDetails {
  reserved 1; // formerly used for ThreatAdditionPosition
  ThreatInfo threat = 2; // the threat to be added
}

//
// The ThreatsManagerSubscription message contains details for subscribing to the threats manager.
// This allows the client to choose the specifics for what to receive.
//
message ThreatsManagerSubscription {
  bool subscribeToAffiliations = 1; // whether to subscribe to affiliations changes
  bool subscribeToThreats = 2;  // whether to subscribe to outbound threats
  bool subscribeToFilterSummary = 3;  // whether to subscribe to a filter summary
  FilterConfig filters = 4; // filter to include. may contain many rules
  bool subscribeToClassifications = 5; // whether to subscribe to classifications changes
}

//
// The TargetClassificationInfo message contains details for setting (or getting) the
// classification type for a target given its ID.
//
message TargetClassificationInfo {
  TargetIdentifier target = 1; // the target
  TargetClassification classification = 2; // the classification of the target
}

//
// The ThreatClassificationResponse message provides the details for a change to a threat's classification.
// Sent as part of a client subscription.
//
message ThreatClassificationResponse {
  TargetClassificationInfo classificationInfo = 1; // the user classification info
  bool hasTimedOut = 2; // whether the threat has timed out. Useful in case the client is not also subscribed to threats.
}

//
// The ThreatAffiliationResponse message provides the details for a change to a threat's affiliation.
// Sent as part of a client subscription.
//
message ThreatAffiliationResponse {
  TargetAffiliationInfo affiliationInfo = 1; // the user affiliation info
  bool hasTimedOut = 2; // whether the threat has timed out. Useful in case the client is not also subscribed to threats.
}

//
// The FilterSummary message contains a count of how many threats have been filtered out of the result
// set for a given client. This is sent periodically to a client if subscribeToFilterSummary is set to true
// when subscribing.
//
message FilterSummary {
  int64 threatsFiltered = 1;  // The number of threats that have been filtered
}

//
// The ThreatsManagerSubscriptionResponse message is the top level wrapper message sent to a subscribed
// client it contains one of 4 possible message types - a threat, filter summary, affiliation change, or
// classification change. Only one of these values will be set. A client will only receive the type of
// responses requested when subscribing.
//
message ThreatsManagerSubscriptionResponse {
  oneof data {
    ThreatInfo threat = 1;      // A ThreatInfo message containing the details of a threat
    FilterSummary filterSummary = 2;   // A message containing the number of threats that have been filtered
    ThreatAffiliationResponse affiliation = 3; // A message containing user affiliation changes
    ThreatClassificationResponse classification = 4; // A message containing user classification changes
  }
}


