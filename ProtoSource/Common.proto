/*------------------------------------------------------------------------------
| SAIC PROPRIETARY INFORMATION
|-------------------------------------------------------------------------------
| The information in this document is proprietary to SAIC. It may not be used,
| reproduced, disclosed, or exported without the written approval of SAIC.
------------------------------------------------------------------------------*/

syntax = "proto3";

import "google/protobuf/wrappers.proto";
import "google/protobuf/descriptor.proto";

package saic.valkyrie.sdk.generated;
option java_package = "saic.valkyrie.sdk.generated";
option java_outer_classname = "CommonProto";
option csharp_namespace = "SAIC.Valkyrie.Api.V1";

//
// The VersionInfo message contains version details for a Valkyrie SDK service.
//
message VersionInfo {
    string version = 1;
    string buildDate = 2;
}

//
// The ResponseInfo message provides generic support for a response back for a specific
// request, with success/failure and details.
//
message ResponseInfo {
    string requestId = 1; // an id that relates the request to this response
    bool success    = 2; // if the request succeeded or not
    string details  = 3; // details about this success or failure
}

//
// The CoordinateLla message contains a 3d position in lat/lon/alt (LLA).
//
message CoordinateLla {
    double latitude = 1; // latitude in degrees (-90 to 90)
    double longitude = 2; // longitude in degrees (-180 to 180)
    double altitude = 3; // HAE in meters
}

//
// The Orientation message contains an AZ/EL pair.
//
message Orientation {
    float azimuth = 1; // An angular value of [0, 360] in degrees.
    float elevation = 2; // An angular value of [-90, 90] in degrees.
}

//
// The LineOfBearing message defines a relative line of bearing from a position.
//
message LineOfBearing {
    double azimuth = 1; // Estimated azimuth angle from the origin (Units: degrees).
    google.protobuf.DoubleValue elevation = 2; //  Estimated elevation angle from the origin (Units: degrees)
    google.protobuf.DoubleValue range = 3; // Range of the LOB (Units: meters)
    CoordinateLla originPosition = 4; // origin point for LOB
}

//
// The TargetingType enumeration is an identification of target type - which could be a track or a threat.
// Used within TargetIdentifier message.
//
enum TargetingType {
    TARGET_UNKNOWN = 0;
    TARGET_THREAT = 1;
    TARGET_TRACK = 2;
}

//
// The TargetIdentifier message identifies the target of an action / command, wherein that target could be a threat
// or a track.
//
message TargetIdentifier {
    TargetingType type = 1; // targeting type
    int64 targetId = 2; // target identifier
    string sourceSystem = 3; // source of the target identification
}

//
// The TargetAffiliationInfo message provides details about the affiliation of a target.
// Used to report or set the affiliation of a target given its ID.
//
message TargetAffiliationInfo {
  TargetIdentifier target = 1; // the target referenced in this affiliation message
  TargetAffiliation affiliation = 2; // the affiliation of the target
}

//
// The Velocity message provides the speed and heading information for a target.
//
message Velocity {
  google.protobuf.DoubleValue speed = 1; // speed of this target in meters/second
  Orientation heading = 2; // Heading of this target in az/el
}

//
// The AngularVelocity message provides azimuth and elevation velocity information for a LoB.
//
message AngularVelocity {
  // In degrees/second. Positive values for clockwise direction, negative for counter-clockwise
  google.protobuf.DoubleValue azimuthVelocity = 1;
  // In degrees/second. Positive values for "above horizon", negative for "below".
  google.protobuf.DoubleValue elevationVelocity = 2;
}

//
// The TransportProtocol enumeration provides the set of available transport protocols for communicating
// with another system or device.
//
enum TransportProtocol {
    TRANSPORT_PROTOCOL_UNKNOWN = 0;
    TRANSPORT_PROTOCOL_UDP = 1; // UDP protocol
    TRANSPORT_PROTOCOL_TCP = 2; // TCP protocol
    TRANSPORT_PROTOCOL_RPC = 3; // RPC/gRPC protocol
    TRANSPORT_PROTOCOL_HTTP = 4; // HTTP(S) protocol
    TRANSPORT_PROTOCOL_RTSP = 5; // RTSP protocol
}

//
// The SystemChangeType message defines the available change types that can occur on a set of monitored
// data objects. For example, if a client is monitoring changes to SA objects, and reported change will
// include if an SA object has been added, modified, or deleted.
//
enum SystemChangeType {
    CHANGE_TYPE_UNKNOWN = 0; // unknown / error
    CHANGE_TYPE_INITIAL = 1; // first-time transmission or request for items; no change in status
    CHANGE_TYPE_ADDED = 2; // a data object has been added to a collection
    CHANGE_TYPE_MODIFIED = 3; // an existing data object has been modified
    CHANGE_TYPE_UNSHARED = 4; // an existing data object has changed its group membership and has become unshared
    CHANGE_TYPE_DELETED = 5; // an existing data object has been deleted
}

//
// Ability to add a description to an enumeration value
//
extend google.protobuf.EnumValueOptions{
  string description = 55225;
}

//
// The TargetAffiliation enumeration provides 2525-C standard affiliation types associated with a threat/track/target.
//
enum TargetAffiliation {
    AFF_PENDING = 0[(description)="Pending"];
    AFF_UNKNOWN = 1[(description)="Unknown"];
    AFF_ASSUMED_FRIEND = 2[(description)="Assumed Friend"];
    AFF_FRIEND = 3[(description)="Friend"];
    AFF_NEUTRAL = 4[(description)="Neutral"];
    AFF_SUSPECT = 5[(description)="Suspect"];
    AFF_HOSTILE = 6[(description)="Hostile"];
    // BOUNDARY - above match order for TCUT3 mil.boss.protocols.tcut.jaxb.V3_0.Affiliation
    AFF_EXERCISE_PENDING = 7[(description)="Exercise Pending"];
    AFF_EXERCISE_UNKNOWN = 8[(description)="Exercise Unknown"];
    AFF_EXERCISE_ASSUMED_FRIEND = 9[(description)="Exercise Assumed Friend"];
    AFF_EXERCISE_FRIEND = 10[(description)="Exercise Friend"];
    AFF_EXERCISE_NEUTRAL = 11[(description)="Exercise Neutral"];
    AFF_JOKER = 12[(description)="Joker"];
    AFF_FAKER = 13[(description)="Faker"];
    // BOUNDARY - matches order for mil.boss.infrastructure.marc.Affiliation
}

//
// The Priority enumeration provides the set of available priority levels for a threat.
//
enum Priority {
  PRIORITY_NONE = 0[(description) = "None"];
  PRIORITY_LOW = 1[(description) = "Low"];
  PRIORITY_MEDIUM = 2[(description) = "Medium"];
  PRIORITY_HIGH = 3[(description) = "High"];
}

//
// The OperationalStatus enumeration provides the set of operational status values for one
// device/service/transport.
//
enum OperationalStatus {
    STATUS_UNKNOWN = 0; // Unknown / not set
    STATUS_OPERATIONAL = 1; // Connected and Operational
    STATUS_NONOPERATIONAL = 2; // Connected and Nonoperational
    STATUS_DISCONNECTED = 3; // Disconnected, not communicating
    STATUS_DEGRADED = 4; // Operational but in a degraded state
}

//
// The FPCONLevel enumeration of available FPCON (Force Protection Condition) levels.
//
enum FPCONLevel {
  FPCON_LEVEL_UNKNOWN = 0;
  FPCON_LEVEL_NORMAL = 1;
  FPCON_LEVEL_ALPHA = 2;
  FPCON_LEVEL_BRAVO = 3;
  FPCON_LEVEL_CHARLIE = 4;
  FPCON_LEVEL_DELTA = 5;
}

//
// TransportConfiguration
// Transport details for connecting to another system over a network
//
message TransportConfiguration {
  TransportProtocol protocol = 1; // network protocol being used
  string address = 2; // ip address
  int32 port = 3; // network port
  google.protobuf.StringValue path = 4; // for HTTP requests; the REST path (example: api/v1/devices)
  google.protobuf.StringValue credentials = 5; // as required, generally for HTTPS
  google.protobuf.StringValue credentialsSeed = 6; // to encrypt credentials information
  google.protobuf.Int32Value pollInterval = 7; // polling interval in milliseconds (if needed)
}