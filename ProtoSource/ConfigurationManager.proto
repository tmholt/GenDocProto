/*------------------------------------------------------------------------------
| SAIC PROPRIETARY INFORMATION
|-------------------------------------------------------------------------------
| The information in this document is proprietary to SAIC. It may not be used,
| reproduced, disclosed, or exported without the written approval of SAIC.
------------------------------------------------------------------------------*/

syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "Common.proto";
import "SAObjects.proto";
import "SystemConfiguration.proto";

package saic.valkyrie.sdk.generated;
option java_package = "saic.valkyrie.sdk.generated";
option java_outer_classname = "ConfigurationManagerProto";
option csharp_namespace = "SAIC.Valkyrie.Api.V1";

//
// The Configuration manager service maintains the configuration details for one Valkyrie installation,
// including the devices installed, the networking details, the running services, and the defined protected
// areas. This is the entry-point for communicating with the Valkyrie API, as it contains the details for
// connecting with the other running services.
//
service ConfigurationManager {

  //
  // Retrieves version information for the ConfigurationManager service.
  //
  rpc getVersion (google.protobuf.Empty) returns (VersionInfo);

  //
  // Returns the set of protected areas that have been defined within the system configuration.
  //
  rpc getProtectedAreas (google.protobuf.Empty) returns (stream ProtectedAreaConfiguration);

  //
  // Returns the current operating level information for the system.
  //
  rpc getSystemLevels (google.protobuf.Empty) returns (SystemLevelsInfo);

  //
  // Sets the current operating level information for the system.
  //
  rpc setSystemLevels (SystemLevelsInfo) returns (ResponseInfo);

  //
  // subscribe
  // Ability for a client to receive async updates to the system configuration information.
  // This currently includes changes to protected areas, SA objects, and system level details.
  //
  rpc subscribe (ConfigurationManagerSubscription) returns (stream ConfigurationSubscriptionResponse);

  //
  // Returns the active system configuration.
  //
  rpc getSystemConfig (google.protobuf.Empty) returns (SystemConfiguration);

  //
  // Returns the service configuration section of the system configuration, which contains
  // details for all SDK services.
  //
  rpc getServicesConfig (google.protobuf.Empty) returns (ServicesConfigurationResponse);

  // region SA object calls
  // TODO VLKY-943: Move SA objects out of configuration manager. They don't belong here

  //
  // Returns the set of SA objects in the system for the inbound parameters of owner and groups.
  //
  rpc getSAObjects (SAObjectGetRequest) returns (stream SAObjectSubscriptionResponse);

  //
  // Returns the full set of SA Object groups currently defined in the system.
  //
  rpc getSAObjectGroups (google.protobuf.Empty) returns (stream google.protobuf.StringValue);

  //
  // Creates a new SA object in the system. Notifies out to subscribed clients with the correct
  // permissions to know about this new SA object.
  //
  rpc createSAObject (SAObjectUpdateRequest) returns (SAObjectUpdateResponse);

  //
  // Updates an existing SA object in the system. Notifies out to subscribed clients with the correct
  // permissions to know about this modified SA object.
  //
  rpc updateSAObject (SAObjectUpdateRequest) returns (SAObjectUpdateResponse);

  //
  // Deletes an existing SA object in the system. Notifies out to subscribed clients with the correct
  // permissions to know about this deleted SA object.
  //
  rpc deleteSAObject (SAObjectDeleteRequest) returns (SAObjectUpdateResponse);

  // endregion

}

//
// The ConfigurationManagerSubscription message contains inbound details for subscribing
// to the configuration manager.
//
message ConfigurationManagerSubscription {
  bool subscribeToLevels = 1; // whether or not to receive changes to the system levels (classification, FPCON)
  bool subscribeToProtectedAreas = 2; // whether or not to receive changes to the set of SA objects in the system
  bool subscribeToSAObjects = 3; // whether or not to receive changes to the set of SA objects in the system
  SAObjectGetRequest saRequest = 4; // the details for the subscription to SA objects
}

//
// When a client receives a ConfigurationSubscriptionResponse, it will be an update to one of the
// sets of information being handled by the configuration manager. This enumeration defines which piece is being
// returned.
//
enum ConfigurationResponseType {
  CONFIGURATION_RESPONSE_UNKNOWN = 0;
  CONFIGURATION_RESPONSE_LEVELS = 1;
  CONFIGURATION_RESPONSE_PROTECTED_AREAS = 2;
  CONFIGURATION_RESPONSE_SA_OBJECTS = 3;
}

//
// The ConfigurationSubscriptionResponse message is a wrapper around a configuration manager subscription
// response. Based on client subscription it could be a change to levels, protected areas, or an SA object.
//
message ConfigurationSubscriptionResponse {
  ConfigurationResponseType type = 1; // what type of data is represented here
  oneof data {
    SystemLevelsSubscriptionResponse levels = 2; // system levels specific data
    ProtectedAreaSubscriptionResponse pa = 3; // protected area specific data
    SAObjectSubscriptionResponse sa = 4; // SA object specific data
  }
}

//
// The ProtectedAreaSubscriptionResponse message contains details about one change to a protected area in
// the system. It provides details about the protected area and  what kind of change just occurred -
// a create/update/delete.
//
message ProtectedAreaSubscriptionResponse {
  SystemChangeType change = 1; // the type of change that has occurred - add/update/delete
  ProtectedAreaConfiguration pa = 2; // the protected area details
}

//
// The SystemLevelsSubscriptionResponse message contains details regarding a change to system levels.
//
message SystemLevelsSubscriptionResponse {
  SystemChangeType change = 1; // the type of change that has occurred - add/update/delete
  SystemLevelsInfo levels = 2; // the system level details
}

//
// The SystemLevelsInfo message defines the current operating levels of the system.
//
message SystemLevelsInfo {
  FPCONLevel level = 1; // current FPCON operating level
  ClassificationLevel classification = 2; // current classification level
  bool systemSupportsFPConLevel = 3; // if this installation/system uses a FPCON level or not
  bool systemSupportsClassification = 4; // if this installation/system uses a classification level or not
}


//
// The ServicesConfigurationResponse message contains the details of all running services at a Valkyrie
// installation. This is the response from the {@link getSdkServicesConfig} call.
//
message ServicesConfigurationResponse {
  repeated ServiceConfiguration services = 1; // List of SDK service configurations
}

