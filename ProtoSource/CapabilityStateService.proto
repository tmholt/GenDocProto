/*------------------------------------------------------------------------------
| SAIC PROPRIETARY INFORMATION
|-------------------------------------------------------------------------------
| The information in this document is proprietary to SAIC. It may not be used,
| reproduced, disclosed, or exported without the written approval of SAIC.
------------------------------------------------------------------------------*/

syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "Common.proto";
import "DevicesStatus.proto";
import "SystemConfiguration.proto";

package saic.valkyrie.sdk.generated;
option java_package = "saic.valkyrie.sdk.generated";
option java_outer_classname = "CapabilityStateServiceProto";
option csharp_namespace = "SAIC.Valkyrie.Api.V1";

//
// The Capability State Service maintains and publishes the current state of
// device capabilities within the Valkyrie system, along with availability information for
// those capabilities given the selection of threats in the system.
//
service CapabilityStateService {

  //
  // Get version information for the Capability State service.
  //
  rpc getVersion (google.protobuf.Empty) returns (VersionInfo);

  //
  // Subscribing to this service provides realtime changes to the state and availability
  // of device capabilities in the system. The client will initially receive the current
  // state information for the system, and then receive updates as they occur.
  // NOTE that part of the information provided is the length of time that a capability
  // is active. This means that, while a capability is active, the client will receive
  // regular updates with this up-time information.
  //
  rpc subscribe (google.protobuf.Empty) returns (stream CapabilityStateInfo);

  //
  // Capabilities can require a selected threat in order to run, AND they can have
  // filtering criteria defined for the ability to use that threat in order to run.
  // This command sets an "active" threat for a client, which will be used to determine
  // the set of available capabilities. A null inbound value clears the selected threat
  // for a client.
  //
  rpc setSelectedThreat (google.protobuf.Int64Value) returns (ResponseInfo);

  ///
  // Capabilities can require a selected threat in order to run, AND they can have
  // filtering criteria defined for the ability to use that threat in order to run.
  // This command gets the "active" threat for a client. A null value means no selected
  // threat has been set for this client.
  //
  rpc getSelectedThreat (google.protobuf.Empty) returns (google.protobuf.Int64Value);

  //
  // The GetCapabilityStates call allows a client to receive the current operational states
  // for all devices in the system.
  //
  rpc getCapabilityStates (google.protobuf.Empty) returns (CapabilityStateInfo);

  //
  // The EvaluateThreat call gives a client the ability to evaluate a specific threat against
  // device capabilities, and answer the question: what capabilities would be available to be
  // run against this threat? It does NOT actually set the active threat for the client, or change
  // operational state for any devices.
  //
  rpc evaluateThreat(EvaluateThreatRequest) returns (stream EvaluateThreatResponse);
}

//
// The EvaluateThreatRequest message is used in the {@link evaluateThreat} RPC call, providing
// the details needed for the evaluation to occur.
//
message EvaluateThreatRequest {
  int64 threatId = 1; // the id of the threat to test the capability against
}

//
// The EvaluateThreatResponse message is the return type for the {@link evaluateThreat} RPC call.
// It provides the details for one response. Multiple of these messages are returned from the
// evaluation, one per capability in the system.
//
message EvaluateThreatResponse {
  int64 threatId = 1; // the id of the threat tested against
  string deviceId = 2; // The ID of this device
  string capability = 3; // The name for this capability
  DeviceOperationState state = 4; // the current/active state for this operational capability
  bool isAvailable = 5; // if this capability is available for running or not
  google.protobuf.StringValue unavailableReason = 6; // if a capability is not available, the text giving the reason
}

//
// The CapabilityStateInfo message contains detailed information about the overall system capabilities state.
// This is the type returned from {@link getCapabilityStates} and from {@link subscribe}.
//
message CapabilityStateInfo {
  // The overall operational status of the system.
  // Overall status is the highest priority state of all devices.
  // Priority order: Unknown < Inactive < Pending < Active
  DeviceOperationState overallStatus = 1;
  google.protobuf.Int64Value overallStartTime = 2; // Timestamp in milliseconds since epoch when the system started any operation
  google.protobuf.Int64Value overallDuration = 3; // Duration in milliseconds since the system started any operation
  repeated DeviceCapabilityState capabilities = 4; // list of device capabilities and their states
}

//
// The DeviceCapabilityState message contains detailed information about one device capability in the system.
//
message DeviceCapabilityState {
  string deviceId = 1; // The ID of this device
  string displayName = 2; // The name for this capability
  google.protobuf.Int64Value startTime = 3; // Timestamp in milliseconds since epoch when the device started performing this operation (if state=ACTIVE)
  google.protobuf.Int64Value duration = 4; // Duration in milliseconds since the device started performing this operation (if state=ACTIVE)
  DeviceOperationalState state = 5; // details about the current operational state of this capability
  DeviceOperationType opType = 6; // the type of operation we are talking about
  CapabilityConstraints constraints = 7; // constraints on the ability to run this capability
  bool isAvailable = 8; // if this capability is available for running or not - potentially based on the active threat set by a client
  google.protobuf.StringValue unavailableReason = 9; // if a capability is not available, the text giving the reason
}
