/*------------------------------------------------------------------------------
| SAIC PROPRIETARY INFORMATION
|-------------------------------------------------------------------------------
| The information in this document is proprietary to SAIC. It may not be used,
| reproduced, disclosed, or exported without the written approval of SAIC.
------------------------------------------------------------------------------*/

syntax = "proto3";


import "google/protobuf/empty.proto";
import "Common.proto";
import "ServiceStatus.proto";

package saic.valkyrie.sdk.generated;
option java_package = "saic.valkyrie.sdk.generated";
option java_outer_classname = "SystemsManagerProto";
option csharp_namespace = "SAIC.Valkyrie.Api.V1";

//
// The systems manager service provides public calls into the Valkyrie system for available system services.
// This includes receiving service status, client services status, and heartbeats.
//
service SystemsManager {

  //
  // Retrieves version information for the SystemsManager service.
  //
  rpc getVersion (google.protobuf.Empty) returns (VersionInfo);

  //
  // Get the most recent set of system statuses maintained within the systems manager.
  // Returns the set of statuses as a single message.
  //
  rpc getStatuses (google.protobuf.Empty) returns (ServiceSubscriptionResponse);

  //
  // A publish call from a Valkyrie service. Pushes status from one Valkyrie service to the
  // SystemsManager, which maintains golden status for a service and publishes periodically
  // to subscribed clients.
  //
  rpc publish (ServiceStatusInfo) returns (ResponseInfo);

  //
  // Ability for a client to receive status for services within the system on a periodic basis.
  //
  rpc subscribe (ClientSystemsSubscription) returns (stream ServiceSubscriptionResponse);
}

//
// The ClientSystemSubscription message contains inbound subscription details for this client.
// This provides the ability to subscribe to a constrained set of event types for system services.
//
message ClientSystemsSubscription {
  repeated string services = 1; // filtering for which service names to receive status for. if empty no filtering.
  repeated ServiceTypeEnum types = 2; // filtering for which service types to receive status for. if empty no filtering.
}



