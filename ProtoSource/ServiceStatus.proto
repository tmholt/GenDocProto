/*------------------------------------------------------------------------------
| SAIC PROPRIETARY INFORMATION
|-------------------------------------------------------------------------------
| The information in this document is proprietary to SAIC. It may not be used,
| reproduced, disclosed, or exported without the written approval of SAIC.
------------------------------------------------------------------------------*/

syntax = "proto3";

import "Common.proto";

package saic.valkyrie.sdk.generated;
option java_package = "saic.valkyrie.sdk.generated";
option java_outer_classname = "ServiceStatusProto";
option csharp_namespace = "SAIC.Valkyrie.Api.V1";


//
// The ServiceWarningTypeEnum enumeration contains possible service warning message types.
//
enum ServiceWarningTypeEnum {
  SERVICE_WARNING_UNKNOWN = 0;
  SERVICE_WARNING_NEVER_CONNECTED = 1;
  SERVICE_WARNING_CONFIGURATION_ERROR = 2;
  SERVICE_WARNING_TRANSPORT_ERROR = 3;
  SERVICE_WARNING_GENERAL = 4;
}

//
// The ServiceTypeEnum enumeration is used for service-status;
// answers the question: what kind of service is this?
//
enum ServiceTypeEnum {
  SERVICE_TYPE_UNKNOWN = 0;
  SERVICE_TYPE_DON = 1;
  SERVICE_TYPE_SDK = 2;
  SERVICE_TYPE_EXTERNAL = 3;
}

//
// The ServiceWarningInfo message contains details for one warning message from a service,
// delivered within its status.
//
message ServiceWarningInfo {
  ServiceWarningTypeEnum warningType = 1; // The type of warning
  string warningMessage = 2; // User-friendly warning message to display and indicate the problem
}

//
// The TransportStatusInfo message contains status information for one transport
// being managed by a service.
//
message TransportStatusInfo
{
  reserved 1; // had been ServiceTransportType
  string name = 2; // a friendly name for this transport (optional)
  OperationalStatus status = 3; // transport connection status
  string error = 4; // error message if not operational
}

//
// The ServiceSubscriptionResponse message is what is sent back to a subscribed client.
// Rather than sending a stream of ServiceStatusInfo values back, we send 1 large message periodically.
// This is both more efficient and defines one "set" of service statuses. Otherwise it would be difficult to
// determine one complete set of service status values.
//
message ServiceSubscriptionResponse {
  int64 timestamp = 1; // publish timestamp (milliseconds since epoch)
  repeated ServiceStatusInfo statuses = 2; // set of service statuses within Valkyrie
}

//
// The ServiceStatusInfo message contains details for one service status.
//
message ServiceStatusInfo {
  int64 timestamp = 1; // status update timestamp (milliseconds since epoch)
  string serviceName = 2; // name of this service
  ServiceTypeEnum serviceType = 3; // what kind of service this is
  OperationalStatus status = 4; // operational status for this service
  string build = 5; // build / version information for this service
  bool isRegistered = 6; // if the service has been registered into the system. kind of DON specific.
  repeated ServiceWarningInfo warnings = 7; // warning messages from the service
  repeated TransportStatusInfo transports = 8; // status for the transports being maintained by this service
}
